기술 동향 및 업계 인사이트(4)
컴퓨팅 기술의 발전과 변화

사전 질문(15분)
우리가 사용하는 앱이나 서비스가 '빠르고 안정적'이려면, 어떤 기술들이 필요할까요?

제품이 작게 시작해서 나중에 사용자 수가 수백만 명이 된다면, 기술적으로 어떤 문제가 생길 수 있을까요?

사전 질문 토론
우리가 사용하는 앱이나 서비스가 '빠르고 안정적'이려면, 어떤 기술들이 필요할까요?
클라우드 인프라와 고성능 서버, 최적화된 데이터베이스 설계, 트래픽 부하 분산을 위한 로드 밸런싱과 CDN이 필수적이다.
또한 서버/클라이언트 코드 최적화, 실시간 모니터링과 자동 복구 시스템을 통해 장애를 빠르게 대응할 수 있어야 한다.
기술적인 성능뿐 아니라 운영 관점에서 지속적인 점검과 개선을 병행하는 것이 중요하다고 생각한다.
제품이 작게 시작해서 나중에 사용자 수가 수백만 명이 된다면, 기술적으로 어떤 문제가 생길 수 있을까요?
서버 과부하, 데이터베이스 병목, 네트워크 대역폭 부족, 보안 취약성 증가 등 다양한 문제가 발생할 수 있다.
트래픽 폭증으로 인한 응답 지연, 시스템 장애, 데이터 저장 한계, 운영 비용 급증 등도 중요한 이슈가 된다.
초기부터 확장성과 안정성을 고려해 설계하고, 트래픽 예측과 대응 전략을 준비하는 것이 필수라고 본다.

Case: AI 모델을 서비스에 적용한다면
AI 교육용 SaaS 소프트웨어를 만드는 과정에서 서버 사용 비용을 검토
교육 효과를 위해 실제 모델을 생성하는 과정까지 소프트웨어에 포함
교육이 한번 진행될 때 마다 작은 규모의 모델을 직접 만드는 과정

데모 제품 상태에서는 문제가 없었음 - 하나의 계정에서 실행
실제 구매를 원하는 고객들은 다수의 학생과 선생님들이 사용하기를 원함
단가를 계산하기 위해 교육 과정 실행시마다 서버 비용을 분석

바꿀 수 있는게 없는 교육 소프트웨어의 가격이 만만치 않다
10개의 교육 프로그램을 모두 한번 수행하는데 소모되는 서버 비용이 약 5만원 선
모델 학습에 필요한 컴퓨팅 자원의 최소화를 위해 사용자가 바꿀 수 있는 부분이 많지 않았다.
교육효과는 낮은데 비용은 많이 들고, 사용자 수에 비례해서 비용이 증가하는 잘못된 모델
이 비즈니스 구조가 근본적으로 문제가 있다는 것을 판단 -> 제품 피봇을 결정

컴퓨팅 시스템에 대한 이해 없이는 서비스의 비용 최적화, 성능 개선, 고객 가치 향상을 제대로 이끌어낼 수 없다.

컴퓨팅 기술이란?
컴퓨팅 기술의 정의
데이터를 입력받아 처리하고 결과를 출력하는 기술 전반
계산, 저장, 전송, 분석 등 모든 정보 흐름을 가능하게 하는 기반 기술
하드웨어(서버, 칩)와 소프트웨어(운영체제, 알고리즘)의 통합 결과물
컴퓨팅 기술의 진화 방향
더 빠르고 효율적인 데이터 처리
더 작은 크기와 낮은 소비 전력
더 분산되고, 더 지능적인 시스템(클라우드, 엣지, AI)

왜 PM에게 컴퓨팅 기술이 중요한가?
제품 가능성의 한계를 결정
어떤 컴퓨팅 기술을 사용할 수 있는지가 제품 기능과 경험의 범위를 결정
기술 선택이 제품 전략을 좌우
기술 선택은 제품 출시 속도, 비용 구조, 확장성에 직접적 영향
잘못된 기술 채택은 시간과 비용 낭비, 시장 실패로 이어질 수 있음
기술 변화는 새로운 기회를 만든다
신기술 도입으로 기존 제품을 혁신하거나 완전히 새로운 시장을 열 수 있음
예: 클라우드가 SaaS 제품 생태계를 열었듯이
기술 이해는 팀과 조직을 이끄는 기본 역량
엔지니어, 디자이너와 효과적으로 협업하려면 기본 기술 이해 필요
기술적 제약이나 가능성을 고려해 현실적인 로드맵 수립 가능

중앙처리 컴퓨팅(1950-70년대)
특징: 대형 메인프레임이 모든 연산 처리, 사용자는 단말기로 접속
기술적 제약:
극도로 높은 비용(수십만~수백만 달러)
전문가만 운영 가능한 복잡성
물리적 접근 필요성
제품의 양상:
소수 대기업과 정부/학술기관만 활용 가능
항공권 예약, 인구조사, 재고관리 등 대규모 데이터 처리 중심
개인용 제품 개념 부재

클라이언트-서버 컴퓨팅(1980-90년대)
특징: 개인용 컴퓨터(클라이언트)와 서버의 역할 분담
기술적 변화:
마이크로프로세서 발전으로 컴퓨팅 비용 급감
이더넷과 TCP/IP를 통한 네트워크 표준화
GUI(그래픽 사용자 인터페이스) 등장
제품 혁신:
워드프로세서, 스프레드시트 등 생산성 도구 대중화
이메일, 초기 인트라넷 등 기업용 네트워크 솔루션
단일 사용자에서 소규모 공동작업으로 협업 방식 변화
사례: 마이크로소프트 오피스 제품군, 로터스 노츠, 오라클 데이터베이스

클라우드 컴퓨팅(2000년대 중반~)
특징: 인터넷을 통해 필요한 만큼 컴퓨팅 자원을 서비스로 제공
기술적 혁신:
가상화 기술의 발전으로 하드웨어 자원 효율적 분할
API 기반 인프라 자동화와 오케스트레이션
대규모 분산 시스템 관리 기술
제품 패러다임 변화:
소유에서 구독으로: SaaS(Software as a Service) 모델의 주류화
스타트업 생태계 폭발: 초기 자본 없이 글로벌 서비스 출시 가능
데이터 중심 제품의 등장: 빅데이터, 분석, 머신러닝 서비스
사례:
Dropbox: 초기에는 적은 서버로 S3 스토리지 활용하여 급성장
Netflix: DVD 대여에서 스트리밍으로 전환하며 AWS로 인프라 이전

엣지 컴퓨팅(2010년대 중반~)
특징: 데이터가 생성되는 장치 또는 근접 위치에서 처리
기술적 배경:
IoT 기기 급증으로 데이터량 폭발적 증가
모바일/임베디드 기기의 연산 능력 향상
5G 등 네트워크 기술 발전으로 분산 처리 효율화
제품 혁신 영역:
실시간 반응이 필요한 서비스: 자율주행, AR/VR, 산업 자동화
프라이버시 중심 애플리케이션: 로컬 음성/얼굴 인식
네트워크 제약 환경용 제품: 오프라인 모드, 간헐적 연결
사례:
Apple의 Siri 온디바이스 처리: 음성 명령의 일부를 기기에서 처리하여 응답성 개선
스마트 제조: 공장 내 센서 데이터를 실시간 처리해 장비 고장 예측

사례: 미디어 소비 경험의 진화
중앙처리 시대: 제한된 채널의 TV 방송(중앙화된 콘텐츠 배포)
클라이언트-서버 시대: DVD, PC 기반 미디어 플레이어(분산화된 소비)
웹 시대: 유튜브, 초기 스트리밍 서비스(중앙화된 플랫폼)
클라우드 시대: 넷플릭스, 스포티파이(글로벌 중앙화, 개인화)
엣지 시대: 캐싱 기술 활용 저지연 스트리밍, AR/VR 콘텐츠(분산 처리, 로컬 경험 최적화)

클라우드 컴퓨팅
인터넷을 통해 필요한 만큼 컴퓨팅 자원을 제공하는 모델.
물리적 서버를 직접 구매하거나 관리하지 않고, 필요한 시점에 컴퓨팅 능력을 빌려 사용하는 방식.
컴퓨팅을 '제품'에서 '서비스'로 전환한 패러다임 변화.
물리적 자원에 대한 추상화 - "서버를 소유하지 않고 컴퓨팅 능력을 활용"
향상된 관리성, 유연성, 자원 효율성을 제공하는 모델


클라우드 서비스 모델 비교
IaaS (Infrastructure as a Service)
제공하는 것: 가상 서버, 스토리지, 네트워크 자원
관리 책임: 사용자가 OS부터 애플리케이션까지 모두 관리
사용 상황: 기존 애플리케이션 이동, IT 인프라 비용 절감
예시: AWS EC2, Google Compute Engine, Azure VMs
제품 관점: 가장 많은 통제권과 유연성, 그러나 관리 부담도 큼
PaaS (Platform as a Service)
제공하는 것: 애플리케이션 개발/실행 환경
관리 책임: 제공업체가 OS/미들웨어 관리, 사용자는 코드와 데이터만 관리
사용 상황: 신속한 개발, 복잡한 인프라 관리 없이 애플리케이션 개발
예시: Heroku, Google App Engine, Azure App Service
제품 관점: 개발 속도 향상, 운영 복잡성 감소, 그러나 일부 커스터마이징 제한

클라우드 서비스 모델 비교
SaaS (Software as a Service)
제공하는 것: 완전한 애플리케이션
관리 책임: 제공업체가 모든 것 관리, 사용자는 단순 사용
사용 상황: 표준화된 비즈니스 프로세스, 협업 도구
예시: Salesforce, Microsoft 365, Slack, Zoom
제품 관점: 가장 빠른 도입, 최소 관리 부담, 그러나 가장 적은 커스터마이징
핵심 기술 요소:
가상화 기술: 물리적 하드웨어를 논리적 리소스로 추상화
분산 시스템: 다수의 서버가 하나의 시스템처럼 작동
자동화 관리: 자원 할당, 조정, 모니터링의 자동화
멀티테넌시(Multi-tenancy): 다수 사용자가 동일 인프라 공유

클라우드가 가져온 제품 개발 혁신
1. 민주화와 접근성 확대
누가 컴퓨팅 파워를 활용할 수 있는가?
메인프레임: 대기업과 연구기관만 → PC: 개인과 중소기업 → 클라우드: 창업자와 학생도
제품 개발자층의 확대
과거: 전문 개발팀만 가능 → 현재: 소규모 팀, 개인도 복잡한 서비스 구축 가능
사례 연구: Canva
복잡한 디자인 소프트웨어를 클라우드 기반으로 단순화
전문 디자이너가 아닌 일반인도 고품질 디자인 제작 가능하게 함
기존에는 접근하기 어려웠던 디자인 도구의 대중화 실현

클라우드가 가져온 제품 개발 혁신
2. 비용 구조와 위험 프로필의 변화
자본 지출(CAPEX) → 운영 비용(OPEX)으로 전환
과거: 서버 구매 위해 수십만 달러 선투자 필요
현재: 사용량 기반 지불, 초기 비용 최소화
실패 비용의 감소
제품-시장 적합성(PMF) 검증을 위한 실험 비용 급감
가설 검증과 피봇(방향 전환)이 경제적으로 가능해짐
사례 연구: Instagram
처음에는 Burbn이라는 위치 기반 앱으로 시작했으나 사용자 반응이 미미
클라우드 인프라로 사진 공유 기능만 추출해 빠르게 새 서비스 구축
저비용으로 피봇하여 10억 달러 기업으로 성장(2년 만에 Facebook에 인수)

클라우드가 가져온 제품 개발 혁신
3. 확장성의 재정의
성장 속도와 규모의 한계 변화
과거: 성장 = 물리적 인프라 확장 → 수개월 소요
현재: 자동 확장(Auto-scaling) → 수분 내 수천만 사용자 처리 가능
글로벌 시장 즉시 진입
지역별 데이터센터 활용으로 전 세계 사용자에게 빠른 서비스 제공
단일 코드베이스로 글로벌 서비스 운영 가능
사례 연구: Pokémon GO
출시 1주일 만에 예상 트래픽의 50배 이상 발생
Google Cloud 인프라로 자동 확장하여 급증하는 수요 대응
이전 시대에는 이런 급속 성장이 인프라 붕괴로 이어졌을 것

클라우드 전환 실패 사례 및 교훈
사례 1: 넷플릭스 크리스마스 이브 장애 (2012)
상황: AWS 동부 리전 서비스 중단으로 넷플릭스 스트리밍 서비스 24시간 중단
근본 원인: 단일 리전 의존성, 지역적 이중화 부족
교훈: 멀티 리전 아키텍처, 카오스 엔지니어링 도입으로 회복력 강화
PM 시사점: 높은 가용성이 필요한 서비스는 초기부터 멀티 리전 설계 고려 필요
사례 2: 어도비 클라우드 전환 성장통
상황: 패키지 소프트웨어에서 Creative Cloud로 전환 시 사용자 반발
근본 원인: 갑작스러운 비즈니스 모델 변화, 오프라인 기능 제한
교훈: 점진적 전환 전략, 하이브리드 접근법 채택으로 사용자 적응 기간 제공
PM 시사점: 기존 사용자 기반이 있는 제품의 클라우드 전환은 단계적 접근 필요
사례 3: 코드스페이스 클라우드 데이터 손실
상황: 클라우드 호스팅 코드 저장소 서비스가 해킹 후 데이터 완전 소실
근본 원인: 백업이 원본과 동일 클라우드에 저장됨, 재해 복구 계획 부재
교훈: 다중 클라우드 백업 전략, 오프사이트 백업 중요성
PM 시사점: 클라우드 전환 시 데이터 보존 및 재해 복구 전략을 핵심 요구사항으로 포함

엣지 컴퓨팅이란?
엣지 컴퓨팅이 부상한 기술적 맥락
데이터 폭발: IoT 기기에서 생성되는 데이터 양이 2025년까지 75ZB 예상(IDC)
네트워크 한계: 모든 원시 데이터를 클라우드로 전송하기에는 대역폭 부족
연산 능력 향상: 모바일/IoT 기기의 프로세싱 파워 크게 증가
5G 확산: 초고속, 초저지연 연결로 분산 처리 모델 지원
엣지 컴퓨팅이란?
데이터가 생성되는 위치(엣지)나 그 근처에서 연산을 수행하는 분산 컴퓨팅 모델
중앙 데이터센터 대신 네트워크 가장자리에서 빠른 반응과 데이터 처리를 목표로 함
스마트폰, IoT 기기, 로컬 서버, 게이트웨이 등이 엣지 노드로서 직접 연산을 수행하고, 빠른 반응을 지원

엣지 컴퓨팅을 가능하게 하는 핵심 기술
경량화된 하드웨어: 저전력 고성능 프로세서, 특화된 AI 칩(NPU, TPU)\
분산 컴퓨팅 프레임워크: 엣지와 클라우드 간 워크로드 조율
컨테이너 기술: 경량화된 애플리케이션 패키징 및 배포
엣지 AI: 온디바이스에서 최적화된 머신러닝 모델 추론
5G 네트워크: 초저지연, 고속 연결 제공
엣지 보안 기술: 분산 환경 특화 인증 및 데이터 보호 체계

클라우드와 엣지의 상호보완적 관계
엣지는 클라우드를 대체하는 것이 아닌 확장하는 개념
클라우드: 대규모 저장, 복잡한 분석, 모델 학습에 적합
엣지: 즉각적 결정, 실시간 처리, 지역 데이터 처리에 적합
로컬(Local)과의 차이점
로컬은 기기 내부에서만 데이터 저장 및 처리
엣지와 비슷해 보이나, 엣지는 기기 근처 서버를 통한 확장 처리 가능
구분 필요성: 로컬은 한정적이고, 엣지는 보다 넓은 연산과 연결을 담당


클라우드에서 엣지로 전환이 필요한 상황
1. 실시간 응답이 필수적인 경우
지연 시간(Latency): 클라우드 왕복 통신은 최소 수십~수백 밀리초 소요
실시간 의사결정: 자율주행, 공장 자동화, 증강현실 등은 밀리초 단위 반응 필요
사용자 경험: 지연은 몰입형 경험(게임, AR/VR)의 품질 저하 초래
2. 네트워크 제약 환경
대역폭 비용: 대량 데이터 전송의 경제적 비효율성(비디오 스트림 등)
불안정한 연결: 원격지, 이동 환경 등에서 지속적인 클라우드 연결 보장 어려움
네트워크 혼잡: 트래픽 피크 시간대 성능 저하 방지

클라우드에서 엣지로 전환이 필요한 상황
3. 데이터 주권과 개인정보 보호
개인정보 현지화: 민감 데이터를 발생 지점에서 처리하여 위험 최소화
규제 준수: GDPR, CCPA 등 데이터 로컬라이제이션 요구사항 충족
보안 향상: 중앙 저장소 공격 위험 감소, 분할 통치 보안 모델
4. 운영 탄력성 요구 사항
오프라인 동작: 인터넷 연결 없이도 핵심 기능 유지 필요
장애 격리: 클라우드 장애가 전체 시스템에 미치는 영향 최소화
지역적 자율성: 로컬 의사결정으로 중앙 의존성 감소

엣지 컴퓨팅이 적합한 제품 영역
실시간 응답이 필수적인 제품
자율주행차: 밀리초 단위 의사결정 필요
AR/VR: 몰입감을 위한 즉각적인 반응 요구
산업 자동화: 공장 설비 실시간 제어
대용량 데이터 생성 제품
비디오 분석: 카메라 영상 전체 전송 비효율적
의료기기: 환자 모니터링 지속 데이터 생성
스마트시티: 센서 네트워크 대용량 데이터
프라이버시 민감 제품
음성 비서: 사용자 음성 데이터 로컬 처리
스마트홈: 가정 내 활동 데이터 보호
건강관리 앱: 개인 건강정보 로컬 분석

사례: 애플의 엣지 컴퓨팅
1. Face ID
사용자의 얼굴 인식은 서버로 전송되지 않고, 아이폰 내부의 Secure Enclave라는 보안 칩에서 직접 처리된다.
얼굴 데이터는 기기 내에만 저장되고, 외부 서버로 전송되지 않는다.
2. Siri 온디바이스 음성 인식
최신 iOS에서는 Siri 음성 명령 일부를 인터넷 없이 기기 내부에서 바로 처리한다.
예를 들어, 알람 설정, 앱 실행 같은 기본 명령은 서버 통신 없이 즉시 동작한다.
3. 사진 앱의 온디바이스 머신러닝
사진 앱의 피플 태깅(사람 분류), 장소 인식, 추억 추천(메모리 기능) 등은 아이폰, 아이패드, 맥 기기 내에서 머신러닝으로 처리된다.
서버로 사진을 올리지 않고도 개인화 기능을 제공한다.
4. Apple Watch의 건강 데이터 분석
심박수, 운동 기록, 수면 데이터 분석은 Apple Watch와 연결된 아이폰 기기 내에서 처리된다.
민감한 건강 정보가 클라우드로 바로 업로드되지 않고, 엣지에서 우선 분석된다.

사례: 테슬라의 엣지 컴퓨팅
1. 자율주행(Full Self-Driving, FSD) 컴퓨터
테슬라는 차량에 자체 개발한 FSD 컴퓨터(자율주행 칩)를 탑재하여,
주행 중 발생하는 센서 데이터(카메라, 레이더, 초음파 등)를 차량 내부에서 바로 처리한다.
대부분의 판단(차선 유지, 장애물 회피, 교차로 통과 등)을 클라우드 서버와 통신 없이 차량 스스로 실시간으로 수행한다.
2. 센서 퓨전(Sensor Fusion) 처리
테슬라는 다양한 센서(카메라 8대, 초음파 센서 등)에서 들어오는 데이터를 실시간으로 종합하여 상황을 인식한다.
이 복합적인 데이터 해석도 클라우드로 전송하지 않고 차량 내부 시스템에서 직접 계산해 반응한다.
3. 오토파일럿 기능
고속도로에서 차선을 유지하거나 차량 간 거리를 조절하는 기능(오토파일럿)은 서버 연결 없이 차량 자체적으로 연산해 제어한다.
네트워크 지연 없이 즉각적으로 반응할 수 있게끔 설계되어 있다.

하이브리드 컴퓨팅
엣지와 클라우드 컴퓨팅의 강점을 상황에 맞게 활용하는 컴퓨팅 아키텍처
단일 접근법의 한계를 극복하고 최적의 사용자 경험과 비용 효율성 추구
현대 제품의 복합적 요구사항에 대응하는 현실적 접근법
하이브리드 컴퓨팅의 핵심 구성요소
지능적 오케스트레이션: 워크로드를 최적 위치로 동적 할당하는 메커니즘
데이터 동기화 프레임워크: 엣지와 클라우드 간 일관성 유지 방법
통합 보안 모델: 분산 환경에서의 일관된 보안 정책 적용
통합 모니터링: 엣지-클라우드 환경 전반의 성능과 상태 관찰

디지털 헬스케어 앱: Apple의 건강 에코시스템 사례
엣지 층(Apple Watch/iPhone)
지속적인 건강 지표 모니터링(심박수, 활동량, 수면 패턴)
개인 건강 데이터의 로컬 암호화 저장
즉각적인 알림 및 피드백(비정상 심박수, 낙상 감지)
일일 활동 목표 추적 및 실시간 피드백
클라우드 층(iCloud/HealthKit)
장기적 건강 트렌드 분석 및 시각화
의료 기록 통합 및 제공자 연결
인구 수준의 익명화된 데이터 분석(Apple Heart Study)
건강 연구 참여 플랫폼(Research Kit)

디지털 헬스케어 앱: Apple의 건강 에코시스템 사례
제품 설계 시사점
데이터 소유권 모델: 사용자 중심, 개인 데이터 제어권 부여
프라이버시 우선 설계: 민감 데이터는 디바이스에 유지, 클라우드 전송은 선택적
배터리 수명과 센싱 균형: 중요도에 따른 센서 활성화 전략(심박수 vs GPS)
연결 단절 고려: 오프라인 상태에서도 핵심 모니터링 및 알림 기능 유지
비즈니스 모델 영향
하드웨어(Watch) + 서비스(Fitness+) 결합으로 수익 다변화
헬스케어 생태계로 사용자 고착화(lock-in) 효과 강화
의료 기관 파트너십을 통한 차별화된 가치 제안

스마트 리테일: 아마존 고(Amazon Go) 무인 매장 사례
엣지 층(매장 내)
수백 개 카메라와 센서를 통한 실시간 쇼핑객 행동 추적
컴퓨터 비전 처리를 위한 엣지 서버(매장별)
제품 집기/반납 인식 및 가상 카트 실시간 업데이트
출입 관리 및 즉각적인 결제 처리
클라우드 층(AWS)
고급 ML 모델 학습 및 개선(물체 인식, 행동 패턴)
매장 간 고객 행동 비교 분석
재고 최적화 및 판매 트렌드 예측
개인화된 추천 및 마케팅 엔진

스마트 리테일: 아마존 고(Amazon Go) 무인 매장 사례
기술적 도전과 해결책
실시간 처리 요구: 엣지 컴퓨팅으로 즉각적인 쇼핑 경험 보장
네트워크 대역폭 제약: 로컬 비디오 처리 후 메타데이터만 클라우드 전송
개인정보 보호: 안면 인식은 엣지에서 처리, 바이오메트릭 데이터는 저장하지 않음
시스템 복원력: 클라우드 연결 없이도 매장 운영 가능한 자율 시스템
비즈니스 영향
인건비 절감과 고객 경험 향상의 이중 가치
수집된 행동 데이터는 온라인-오프라인 통합 전략의 핵심 자산
매장 레이아웃, 제품 배치 최적화를 위한 정밀한 인사이트 획득

컴퓨팅 기술과 서비스의 관계를 이해하고고객가치를 최적화하는 아키텍처를 설계하고이를 활용하는 역량이 필요하다

Break Time

고성능 컴퓨팅과 AI 서비스
HPC: High Performance Computing
전통적 HPC(1990-2000년대): 슈퍼컴퓨터, 대규모 클러스터 중심
과학 시뮬레이션, 기상 예측, 핵무기 설계 등 특수 용도
접근성 제한적, 국가 기관 및 대기업만 활용 가능
제품 개발과의 연결성 낮음
현대 HPC(2010년대 이후): 
클라우드와 특수 가속기(GPU, TPU)의 등장으로 HPC 접근성이 대폭 확대됨
일반 기업과 스타트업도 필요에 따라 접근 가능
AI, 데이터 분석, 실시간 처리 등 광범위한 활용
제품 혁신의 핵심 동력으로 변화

CPU vs GPU: 컴퓨팅 아키텍처 비교
CPU(Central Processing Unit): '다재다능한 일반주의자'
다양한 복잡한 작업을 유연하게 처리
적은 수의 강력한 코어(4~64개)
순차적 실행과 복잡한 제어 흐름에 최적화
예시: 웹 서버, 데이터베이스, 운영체제 관리
GPU(Graphics Processing Unit): '전문화된 병렬 작업자' 
동일한 연산을 대규모 데이터에 병렬로 적용
수천 개의 단순한 코어
계산 처리량(throughput) 극대화에 특화
예시: 이미지 처리, 딥러닝 학습, 대규모 시뮬레이션


적합한 작업 유형
CPU에 적합한 작업
복잡한 분기와 조건부 로직이 많은 작업
순차적 처리가 필요한 작업
불규칙한 메모리 접근 패턴을 가진 작업
예시: 웹 서버, 데이터베이스 관리, 운영체제 기능
GPU에 적합한 작업
동일한 연산을 대량의 데이터에 적용하는 작업
데이터 간 의존성이 적은 병렬 처리 가능 작업
규칙적인 메모리 접근 패턴을 가진 작업
예시: 이미지 처리, 딥러닝, 물리 시뮬레이션, 암호화폐 채굴

왜 일반 CPU로는 AI 워크로드에 부족한가?
AI 워크로드의 특성
대규모 행렬 곱셈: 딥러닝의 핵심 연산, 병렬 처리에 적합
예측 가능한 메모리 패턴: 특화된 메모리 계층으로 최적화 가능
정밀도 요구사항: AI 연산은 종종 낮은 정밀도(FP16, INT8)로 충분
실용적 성능 차이
학습 시간: GPU 사용 시 CPU만 사용할 때보다 10-100배 빠름
비용 효율성: 동일 작업에 대해 특화 하드웨어가 TCO(총소유비용) 낮음
에너지 효율성: 와트당 처리량 5-30배 향상


AI 워크로드에서의 성능 차이
딥러닝 모델 학습
NVIDIA Tesla V100 GPU vs 고성능 서버 CPU 비교
이미지 분류(ResNet-50): GPU가 CPU보다 약 30-35배 빠름
자연어 처리(BERT): GPU가 CPU보다 약 20-25배 빠름
모델 추론(Inference)
배치 크기가 클 때: GPU가 CPU보다 5-15배 빠름
배치 크기가 작을 때(실시간 추론): 격차 감소, 때로는 최적화된 CPU가 유리할 수 있음
사례: 모바일 기기의 CPU-GPU 협업
스마트폰 카메라의 실시간 이미지 처리
CPU: 사용자 인터페이스 관리, 카메라 제어, 복잡한 결정 로직
GPU: 실시간 필터 적용, 이미지 안정화, HDR 처리
결과: 배터리 효율성과 성능의 최적 균형점 달성

AI 기반 제품과 컴퓨팅 인프라
클라우드 AI 서비스
하드웨어 추상화를 통한 AI 인프라 접근성 확대
주요 서비스:
AWS SageMaker, EC2 P4/P5 인스턴스
Google Cloud Vertex AI, TPU 서비스
Azure Machine Learning, ND/NC 시리즈 VM
특화 서비스: Lambda Labs, CoreWeave 등
오픈소스 생태계
하드웨어 자원 효율화를 위한 소프트웨어 도구
주요 프레임워크 및 라이브러리:
학습 최적화: DeepSpeed(Microsoft), Megatron-LM(NVIDIA)
모델 압축: ONNX, TensorRT, PyTorch Quantization
엣지 배포: TensorFlow Lite, ONNX Runtime
자동화: Hugging Face Accelerate, Ray

AI 기반 제품과 컴퓨팅 인프라
AI 제품 개발 단계별 컴퓨팅 요구사항
모델 훈련: 대규모 병렬 처리 가능한 클러스터 필요
모델 최적화: 타겟 환경에 맞춰 경량화 작업
서비스 배포: 비용효율 높은 추론 인프라 필요
컴퓨팅 선택이 비즈니스에 미치는 영향
개발 속도: 훈련 시간이 짧을수록 반복 개선 속도 증가
운영 비용: 추론 효율성이 곧 유닛 이코노믹스 결정
사용자 경험: 응답 속도가 사용자 만족도에 직결
인프라 전략 옵션
자체 구축: 통제력 높지만 초기 투자 비용 큼
클라우드 GPU/TPU 활용: 유연한 비용 구조
특화 AI 플랫폼: 개발 편의성 확보, 일부 제약 존재

AI 컴퓨팅 최적화 전략
모델 최적화 기법
양자화(Quantization): 부동소수점 연산을 정수형으로 단순화해 모델 크기와 연산량 축소
가지치기(Pruning): 중요도가 낮은 연결을 제거해 경량화
지식 증류(Knowledge Distillation): 큰 모델의 지식을 작은 모델로 압축 전달
PM 포인트: 정확도와 효율성 사이 균형점 찾기
인프라 최적화 전략
배치 처리: 요청을 묶어 처리해 리소스 효율화
캐싱: 반복되는 질의 결과를 저장해 속도 향상
자동 스케일링: 수요에 맞춰 리소스를 유연하게 조정
PM 포인트: 사용자 경험과 비용 간 최적 지점 설정
하이브리드 접근법
온디바이스 + 클라우드 모델 조합
복잡성과 비용에 따른 처리 위치 결정
PM 포인트: 제품 사용 상황별 차별화된 전략 설계

지속 가능한 디지털 인프라
전 세계 에너지 소비와 탄소 배출에서 IT 부문의 비중
글로벌 전력 소비의 약 3-5% 차지
데이터센터만 전 세계 전력의 1% 이상 사용
클라우드 서비스, AI 학습, 암호화폐 채굴 등으로 소비량 급증
전자 폐기물(E-waste) 문제
연간 5,000만 톤 이상의 전자 폐기물 발생
재활용률은 20% 미만, 대부분 매립되거나 개발도상국으로 수출
희귀 금속 및 유해 물질 함유

그린 컴퓨팅이란?
환경 영향을 최소화하는 컴퓨팅 기술과 관행
에너지 효율, 탄소 발자국 감소, 지속가능한 자원 활용에 중점
기업의 ESG 전략과 밀접하게 연결
주요 접근 방식
에너지 효율적 하드웨어
최적화된 소프트웨어 설계
재생 에너지 활용 데이터센터
장비 수명주기 관리
비즈니스적 의미
운영 비용 절감
규제 준수 및 리스크 관리
브랜드 이미지 및 고객 선호도
투자자 관심 증대

그린 컴퓨팅 - 에너지 효율적 하드웨어
저전력 프로세서 아키텍처
ARM 기반 서버 확산(AWS Graviton, Apple Silicon)
최신 CPU/GPU의 전력 효율성 향상 기술(동적 전력 관리)
냉각 기술 혁신
액체 냉각(Liquid Cooling) 시스템
자연 냉각(Free Cooling) 활용
전력사용효율(PUE) 지표 최적화
친환경 하드웨어 설계
재활용 가능 소재 사용
수명 연장 설계(Longevity by Design)
제조 과정의 탄소 배출 감소

그린 컴퓨팅 - 에너지 효율적 소프트웨어


그린 코딩 원칙
불필요한 연산 제거
메모리 및 스토리지 최적화
효율적 알고리즘 선택
에너지 인식 애플리케이션
배터리 사용량 모니터링 및 최적화
백그라운드 프로세스 관리
다크 모드 및 저전력 UI 설계

그린 컴퓨팅 - 지속 가능한 데이터센터
재생 에너지 활용
구글, MS, 페이스북 등 100% 재생 에너지 전환 계획
현장 태양광/풍력 설치 및 전력구매계약(PPA)
위치 전략
차가운 기후 지역 선호(스웨덴, 핀란드 등)
재생 에너지 풍부 지역 선택
열 재활용(주변 건물 난방 등에 활용)
순환 경제 적용
서버 장비 재사용 및 재활용
물 사용 효율화(WUE) 관리
서버 수명 연장 프로그램

클라우드 서비스 제공업체의 그린 컴퓨팅 전략
Google
2030년까지 24/7 무탄소 운영 목표
머신러닝으로 데이터센터 냉각 효율 15% 개선
탄소 지능형 컴퓨팅(Carbon-Intelligent Computing)
Microsoft
2030년까지 탄소 네거티브, 2050년까지 역사적 배출량 제거
해저 데이터센터 실험(Project Natick)
지속가능성 계산기로 고객 탄소 발자국 가시화
Amazon
2040년까지 탄소 중립(The Climate Pledge)
50개 이상 재생 에너지 프로젝트 투자
AWS 인스턴스 유형별 탄소 발자국 산정

하드웨어 제조업체의 그린 컴퓨팅 전략
Apple
2030년까지 공급망 포함 완전 탄소 중립 목표
재활용 소재 사용 확대(Apple Trade In)
에너지 효율적 M1/M2 칩 설계
Dell
순환형 설계 원칙 도입
재생 및 재활용 소재 사용 확대
포장재 최소화 및 지속 가능한 소재 전환
Intel
2030년까지 제조 과정 100% 재생 에너지 사용
반도체 제조 과정의 수자원 보존
에너지 효율적 프로세서 설계

디지털 보안 환경의 변화
1. 전통적 경계 기반 보안의 붕괴
클라우드 도입이 보편화되면서 네트워크 안과 밖을 구분하는 명확한 경계가 사라짐
원격/하이브리드 근무가 확산되어, 사용자가 어디서나 접속하는 환경이 기본이 됨
BYOD(Bring Your Own Device) 정책이 널리 퍼져, 회사 소유가 아닌 개인 기기로 업무를 수행하는 경우가 많아짐
2. 위협 환경의 고도화와 산업화
APT(Advanced Persistent Threat): 장기간에 걸쳐 은밀하게 침투하고 내부 시스템을 장악하는 고급 해킹 공격 증가
랜섬웨어: 단순 파일 암호화를 넘어 서비스 전체를 마비시키는 공격 방식이 진화
사이버 범죄의 산업화: 해킹 도구와 서비스가 거래되는 "사이버 범죄 시장" 활성화
국가 지원 해킹: 일부 공격은 국가 차원에서 조직적으로 지원, 기업과 인프라를 겨냥
3. 규제 환경의 강화
GDPR(유럽 일반 개인정보보호법), CCPA(캘리포니아 소비자 프라이버시법) 등 데이터 보호 규제가 강화됨
산업별로 별도의 보안 컴플라이언스 요구사항이 추가되고 있음 (예: 금융, 의료, 교육 분야)
보안 사고 발생 시, 일정 기준 이상은 공개 의무화되는 추세

제로 트러스트 보안 모델
"절대 신뢰하지 말고, 항상 검증하라"(Never Trust, Always Verify)
주요 개념:
명시적 인증/인가: 모든 자원 접근 시 매번 인증(Authentication)과 인가(Authorization)를 거쳐야 함
ID 및 컨텍스트 기반 접근 제어: 네트워크 위치(IP 등)만으로 접근을 허용하지 않고, 사용자 ID, 기기 상태, 접속 위치, 접속 시간 등 다양한 정보를 조합해 접근 여부를 판단
최소 권한 원칙(Principle of Least Privilege): 사용자나 시스템에 필요한 최소한의 권한만 부여해, 만약 침해되더라도 피해 범위를 최소화
지속적 검증 및 모니터링: 최초 접속 이후에도 신뢰를 유지하지 않고, 행동 패턴, 세션 상태 등을 지속적으로 점검

PM이 고려해야 할 보안 설계 원칙
1. 데이터 최소 수집(Data Minimization)
사용자에게 꼭 필요한 최소한의 데이터만 수집
수집 목적과 보관 기간을 명확히 설정
규제(GDPR, CCPA 등) 대응을 위해 데이터 흐름 사전 정의 필요
2. 기본적으로 암호화(Default Encryption)
저장 데이터(At Rest)와 전송 데이터(In Transit) 모두 암호화 적용
암호화는 옵션이 아니라 기본값(Default)으로 설정
특히 개인정보(PII)와 민감 정보는 별도 강화 조치 필요
3. 인증 강화(Authentication Hardening)
다중 인증(MFA, Multi-Factor Authentication) 적용 검토
세션 관리: 타임아웃, 재인증 흐름 설계 포함
비밀번호 정책: 길이, 복잡성, 주기적 변경 강제할 필요성 평가

PM이 고려해야 할 보안 설계 원칙
4. 최소 권한 부여(Least Privilege Access)
사용자, 시스템, 내부 관리자의 권한을 최소화해 할당
역할 기반 접근 제어(RBAC, Role-Based Access Control) 적용 고려
권한 요청 및 변경은 로그로 관리
5. 취약점 관리 프로세스 구축(Vulnerability Management)
개발 초기부터 보안 취약점 점검 도구(예: SAST, DAST) 연동
주기적 보안 테스트(펜테스트 포함) 계획
코드, 라이브러리, 서드파티 모듈의 업데이트 관리 체계 마련

PM이 고려해야 할 보안 설계 원칙
6. 사고 대응 체계 준비(Incident Response Planning)
보안 사고 발생 시 대응 플로우 사전 설계
사고 보고, 조치, 고객 통지까지 단계별 매뉴얼 마련
로그와 모니터링 시스템을 통한 조기 감지 체계 구축
7. 외부 벤더 및 API 보안 검증
API 연동, SaaS 이용 시 별도 보안 검토 수행
외부 서비스 장애 또는 해킹 시 리스크 최소화 방안 마련
데이터 위탁 또는 처리 계약 시 보안 조항 포함

균형있는 보안 전략 구현을 위한 설계 원칙
1. 점진적 마찰(Progressive Friction):
위험도가 낮은 활동은 최소한의 보안 절차로 시작
위험도가 높아질수록 추가 보안 레이어 점진적 도입
예: 계정 조회는 간단히, 결제는 추가 인증 요구
2. 상황별 보안(Contextual Security):
사용자 행동, 위치, 디바이스, 네트워크 등 컨텍스트 고려
비정상적 패턴에만 추가 보안 조치 적용
예: 평소와 다른 위치에서 접속 시에만 추가 인증 요청

균형있는 보안 전략 구현을 위한 설계 원칙
3. 유도 설계(Nudge Design):
사용자를 강제하지 않고 더 안전한 행동으로 유도
기본값을 안전한 옵션으로 설정
예: 강력한 비밀번호 생성기 기본 제공, 2FA 설정 유도
4. 교육적 보안(Educational Security):
보안 조치의 이유와 가치를 간결하게 설명
사용자 이해도를 높여 자발적 참여 유도
예: 개인정보 보호 설정의 실제 효과 시각화

컴퓨팅 기술 변화와 미래 제품 전략
양자 컴퓨팅의 잠재력
복잡한 최적화 문제를 기존 컴퓨터보다 빠르게 해결
암호화, 신약 개발, 기후 모델링 등 분야에서 혁신 가능성
현재는 제한적 활용, 중장기 제품 전략에 대비 필요
탈중앙화 컴퓨팅
블록체인 기반의 분산 컴퓨팅 모델
사용자 중심 데이터 소유권 강화
신뢰를 기반으로 한 새로운 제품 설계 패러다임 제시
뉴로모픽 컴퓨팅
인간 뇌의 구조와 작동 방식을 모방한 컴퓨팅 아키텍처
초저전력으로 효율적인 패턴 인식 수행
엣지 AI 제품의 성능과 가능성 확장

PM은 컴퓨팅 기술을 어떻게 바라봐야 하는가
단순 트렌드 추종을 지양
기술 자체가 아니라 문제 해결 관점에서 접근
"우리 제품에 이 기술이 필요한가?"를 먼저 질문
제품 가치에 기여하지 않는 기술은 과감히 배제
제품 수명주기와 기술 성숙도 연계
초기 제품: 빠른 검증이 가능한 안정적 기술 우선
성장기 제품: 차별화를 위한 최적화 기술 도입
성숙기 제품: 효율성과 비용 절감 기술 집중
기술 역량을 제품 로드맵에 통합
기술 발전 방향을 고려해 장기 비전 설계
단계별 기술 도입 계획 수립
기술 부채를 관리하는 전략 마련

그룹 연구(3인 1조)
오늘 학습한 다양한 컴퓨팅 기술 트렌드 중에서 하나의 세부 주제를 선택합니다. (너무 광범위하지도, 너무 세부적이지도 않은 적절한 범위의 주제를 선정하는 것이 좋습니다.)
선택한 주제에 대한 최신 트렌드를 조사하고, 이 기술이 어떻게 발전해 나가고 있는지 분석해 봅니다.
이러한 기술 트렌드가 실제 제품의 가치 변화에 어떤 영향을 미치고 있는지 생각해보고, 그 내용을 체계적으로 정리해 봅니다.

질의응답 & 토론

수고하셨습니다
