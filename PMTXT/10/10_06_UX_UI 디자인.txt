UX/UI 디자인(6)
디자인 시스템

사전 질문(15분)
제품의 디자인 일관성이 무너질 경우, 사용자 경험에 어떤 구체적인 문제가 발생할 수 있을까요? 사용자 불편이나 비즈니스 측면의 영향을 자유롭게 작성해 봅니다.

사용자가 제품을 일관되고 편리하게 사용할 수 있도록 하기 위해, 어떤 디자인 요소들이 반드시 정의되어 있어야 할까요? 

사전 질문 토론
1. 제품의 디자인 일관성이 무너질 경우, 사용자 경험에 어떤 구체적인 문제가 발생할 수 있을까요?
디자인이 일관되지 않으면 기능이 같아도 화면마다 달라 보여서 혼란스럽고, 사용 흐름이 끊겨서 집중이 안 된다.
예상한 행동 결과가 다르게 나타나거나, 위치나 색상이 달라지면 계속 학습해야 하니 피로감이 크다.
결국 사용자는 신뢰를 잃고 제품을 이탈하게 되며, 이는 곧 고객문의 증가, 전환율 하락, 브랜드 이미지 손상으로 이어진다.
이 모든 게 유지보수 비용까지 높여 비즈니스 전반에 부담이 된다.
2. 사용자가 제품을 일관되고 편리하게 사용할 수 있도록 하기 위해, 어떤 디자인 요소들이 반드시 정의되어 있어야 할까요?
동일한 기능에는 동일한 버튼과 아이콘, 일관된 색상과 타이포그래피가 반복적으로 사용되어야 한다.
내비게이션 구조, 상태 변화, 인터랙션 피드백까지 예측 가능해야 사용자가 편안하게 느낀다.
기본 UI 컴포넌트부터 에러 메시지, 마이크로카피, 반응형 대응 방식까지 체계적으로 정리되어 있어야 한다.
이런 요소들이 정리된 디자인 시스템이 있어야 새 기능 추가나 확장도 쉽게 이어질 수 있다.

Case: 리뉴얼을 하려고 해도 정리가 필요했다
제품 전체 리뉴얼을 하기 위해 디자인, 개발 레거시를 검토
사용된 서체가 20여가지
색상은 종류별로 다른 변수명으로 정의
아이콘은 그때그때 만들어서 사용
사용된 색상의 톤의 종류가 7가지가 넘어감
제품의 디자인 구조가 전반적으로 산만하고 일관되지 않은 모습
새로운 기능 개발이나 개선 제안을 시도하려고 해도 계속 제품의 복잡성이 증가하는 상황
이를 해결하기 위해 줄여야 할 것부터 하나씩 시도
글씨체를 3가지로 줄이고 같은 크기가 사용된 곳을 하나의 용어로 묶어서 지정
각자 만들어져 있는 버튼을 하나의 공유된 컴포넌트로 대체
단계적으로 이를 시스템화하여 최종적으로 하나의 정리된 디자인 시스템 완성
초기에는 리소스가 들었지만, 이후 개발 속도가 향상되 더 많은 실험이 가능해짐

디자인 시스템이 없으면 일어나는 일들
1. "이거 어떤 버튼 써요?" - 매일 반복되는 질문
개발자: "회원가입 버튼은 어떤 스타일로 만들어요?"
디자이너: "음... 로그인 화면에 있는 거랑 똑같이 하면 돼요"
개발자: "그게 어떤 건데요? 코드 보니까 버튼이 15종류나 있는데..."
사례:
B2B SaaS 스타트업 C사는 2년 만에 버튼 스타일이 23개로 늘어남
신규 입사자는 "어떤 버튼을 언제 쓰는지" 파악하는데만 일주일 소요
결국 매번 새로 만드는 게 더 빠르다고 판단 → 악순환

디자인 시스템이 없으면 일어나는 일들
2. "모바일이랑 웹이 왜 달라요?" - 플랫폼 간 경험 파편화
웹: 송금 확인 버튼이 오른쪽 하단
모바일: 송금 확인 버튼이 화면 중앙
사용자: "같은 앱 맞아요? 가짜 앱 아니에요?"
3. "그거 이미 만들어둔 거 있는데..." - 중복 작업의 늪
PM: "이번에 새로운 알림 컴포넌트 필요해요"
개발자A: "제가 지난달에 만들어뒀어요"
개발자B: "어? 저도 만들었는데..."
개발자C: "저는 더 좋은 걸로 만들었어요"
→ 같은 알림 컴포넌트가 3개 존재, 각각 다른 페이지에서 사용 중

디자인 시스템이란?
"재사용 가능한 컴포넌트들이 명확한 표준과 함께 조직되어, 대규모로 디자인을 관리할 수 있게 하는 시스템"
레고 블록의 비유
레고 블록 = 컴포넌트
조립 설명서 = 사용 가이드
레고 시리즈 = 일관된 제품군
구성요소
Foundations (색상, 타이포그래피, spacing 등)
Components (버튼, 카드, 모달 등)
Patterns (로그인 화면, 피드, 대시보드 등)
And more…

디자인 시스템의 주요 이점
일관성 (Constantly Evolving)
진화하는 시스템
버전 관리
지속적 개선
효율성 증가
의사결정 시간 단축
반복 작업 제거
빠른 프로토타이핑
확장성 (Scalability)
대규모 팀 협업
다중 플랫폼 대응
제품군 확장
품질 향상
검증된 패턴 사용
접근성 기본 탑재
일관된 사용자 경험

Color System - 색상의 언어
색상이 전달하는 메시지
같은 "완료" 버튼을 다른 색으로:
🟢 초록색 → "좋아, 성공이야!"
🔵 파란색 → "확인, 알겠어"
🔴 빨간색 → "잠깐, 위험해!"
⚫ 검은색 → "음... 뭔가 진지해"
사용자는 색상을 통해 즉각적으로 의미를 파악합니다.

Color System - 색상의 언어

1. Brand Colors (브랜드 컬러)
Primary: 핵심 브랜드 색상
Secondary: 보조 브랜드 색상
2. Functional Colors (기능 색상)
Success: 성공, 완료 (초록)
Error: 오류, 위험 (빨강)
Warning: 주의, 경고 (노랑)
Info: 정보, 안내 (파랑)
3. Neutral Colors (중립 색상)
텍스트, 배경, 테두리용
Gray scale (50-900)

Color System - 색상의 언어


Color System - 색상의 언어

Level 1: Primitive Palette (원시 팔레트)
모든 색상의 재료가 되는 기본 팔레트
Blue-50:  #EFF6FF (가장 연함)
Blue-100: #DBEAFE
Blue-200: #BFDBFE
...
Blue-900: #1E3A8A (가장 진함)
특징:
브랜드와 무관한 순수 색상
50-900으로 명도 표현
모든 색상군에 동일 적용

Color System - 색상의 언어

Level 2: Semantic Palette (의미 팔레트)
색상에 우리 제품의 의미를 부여
$color-primary: Blue-600→ "우리 제품의 주요 행동"
$color-success: Green-600  → "잘했어, 성공이야"
$color-danger: Red-600→ "조심해, 위험해"
특징:
용도가 명확한 이름
제품 전체에서 일관된 의미
브랜드 변경 시 쉽게 교체

Color System - 색상의 언어

Level 3: Component Palette (컴포넌트 팔레트)
각 컴포넌트의 구체적 사용 정의
$button-primary-bg: $color-primary
$button-primary-text: white
$button-primary-border: transparent
$alert-success-bg: Green-50
$alert-success-text: Green-900
$alert-success-icon: Green-600
특징:
컴포넌트별 명확한 규칙
상태별 색상 정의
개발자가 고민할 필요 없음

Color System - 색상의 언어

실전 적용: 다크 모드 대응
잘못된 접근: 단순 반전
라이트: 흰 배경 + 검은 글씨
다크: 검은 배경 + 흰 글씨
문제점:
눈이 아픔 (대비 너무 강함)
색상 의미 왜곡
브랜드 정체성 상실

Color System - 색상의 언어

올바른 접근: 체계적 조정
라이트 모드:
Background: Gray-50 (#FAFAFA)
Text: Gray-900 (#111827)
Primary: Blue-600 (#2563EB)
다크 모드:
Background: Gray-900 (#111827)
Text: Gray-100 (#F3F4F6)
Primary: Blue-500 (#3B82F6) ← 채도 낮춤
핵심:
순수 검정/흰색 피하기
채도 조정으로 편안함 확보
의미는 유지, 톤만 조정

Typography System - 정보의 위계
혼돈의 예시:
페이지마다 다른 제목 크기:
상품 상세: 28px
결제 페이지: 32px  
마이페이지: 30px
사용자 반응:
"어? 이 페이지가 더 중요한가?"
"왜 여기만 크기가 다르지?"
체계의 예시:
일관된 타입 스케일:
Page Title: 32px (모든 주요 페이지)
Section Title: 24px (모든 섹션)
Card Title: 20px (모든 카드)
사용자 반응:
"아, 이게 페이지 제목이구나"
"이건 하위 섹션이구나"
(의식하지 않고 자연스럽게 이해)

Typography System - 정보의 위계


Typography System - 정보의 위계

타입 스케일 설계하기
기준점: 16px (본문)
비율: 1.25 (4:5 비율)
16 × 1.25 = 20px -> 20 × 1.25 = 25px → 24px로 조정 -> 24 × 1.25 = 30px → 32px로 조정
결과:
12px - Small text
14px - Caption  
16px - Body (기준)
20px - Subtitle
24px - Title
32px - Display
왜 이렇게 하는가?
리듬감: 일정한 비율로 시각적 안정감
구분성: 충분한 차이로 위계 명확
조화: 배수 관계로 자연스러운 조합

Spacing System - 공간의 리듬
왜 4px or 8px 인가?
수학적 이유
4은 2^2 (개발자 친화적)
대부분 화면이 4의 배수
계산이 간단 (4, 8, 16...)
실용적 이유
너무 작지도(2px) 크지도(16px) 않음
세밀한 조정 가능
iOS/Android 모두 호환

Spacing System - 공간의 리듬

Padding (안쪽 여백):
"이 요소가 숨 쉴 공간"
버튼 내부: 클릭 영역 확보
카드 내부: 내용물 보호
모달 내부: 답답함 방지
Margin (바깥 여백):
"다른 요소와의 거리"
버튼 사이: 구분 명확히
섹션 사이: 내용 분리
카드 사이: 개별성 강조

정렬 (Alignment)
Edge Alignment (가장자리 정렬)
왼쪽 정렬: 읽기 시작점 통일
오른쪽 정렬: 숫자, 금액 표시
상단 정렬: 카드 UI
하단 정렬: 바닥글 요소
Center Alignment (중앙 정렬)
수평 중앙: 제목, CTA
수직 중앙: 아이콘과 텍스트

정렬 (Alignment)
Optical Alignment (시각적 정렬)
"수학적으로 맞아도 눈에는 틀려 보인다"
원과 사각형의 크기:
□ = 16x16px
○ = 18x18px (시각적으로 동일하게 보임)
이유: 원은 면적이 작아 보임
텍스트와 아이콘 정렬:
Baseline 정렬 ❌ (아이콘이 너무 낮아 보임)
시각적 중앙 정렬 ✅ (x-height 기준)

정렬 (Alignment)
정렬이 주는 효과
통일감과 안정감
예측 가능한 레이아웃
인지 부담 감소
스캔 가능성 향상
F-패턴, Z-패턴 지원
정보 탐색 용이
전문성 표현
깔끔한 인상
신뢰도 상승

Button Component
1. Default (기본)
외관: 평상시 모습
목적: 클릭 가능함을 암시
디자인: 
명확한 경계
충분한 대비
클릭 유도
2. Hover (호버)
외관: 마우스 올렸을 때
목적: 인터랙티브함 강조
디자인:
살짝 밝아지거나 어두워짐
그림자 추가
커서 변경 (pointer)

Button Component
3. Active/Pressed (활성/누름)
외관: 클릭하는 순간
목적: 즉각적 피드백
디자인:
눌린 느낌 (그림자 감소)
색상 더 진하게
크기 미세하게 축소 (선택적)
4. Disabled (비활성)
외관: 사용 불가 상태
목적: 조건 미충족 알림
디자인:
채도 낮춤 (회색조)
투명도 적용 (opacity: 0.5)
커서 변경 (not-allowed)

Button Component
5. Loading (로딩)
외관: 처리 중
목적: 진행 중임을 알림
디자인:
스피너 표시
텍스트 변경 ("저장 중...")
클릭 방지

Button Component

Form Components - 입력의 과학
Input Field의 구조
Label (라벨)
┌─────────────────────────┐
│ 			Placeholder Text		         │
└─────────────────────────┘
Helper Text (도움말)


Form Components - 입력의 과학
1. Empty (비어있음)
시각적 표현:
연한 테두리
Placeholder 표시
Label 기본 색상
사용자 심리: "여기에 뭔가 입력하면 되는구나"
2. Focused (포커스)
시각적 표현:
진한 테두리 (주로 Primary Color)
테두리 두께 증가
그림자 효과 (선택적)
사용자 심리: "지금 여기에 입력 중이야"
3. Filled (입력됨)
시각적 표현:
입력값 표시
Placeholder 숨김
기본 테두리로 복귀
사용자 심리: "입력 완료했어"

Form Components - 입력의 과학
4. Error (오류)
시각적 표현:
빨간 테두리
빨간 에러 메시지
에러 아이콘 (선택적)
사용자 심리: "뭔가 잘못됐구나, 고쳐야겠다"
5. Success (성공)
시각적 표현:
초록 테두리 (선택적)
체크 아이콘
성공 메시지
사용자 심리: "올바르게 입력했구나"

Form Components - 입력의 과학

Form Components - 입력의 과학
Form Validation 패턴
즉시 검증 (Instant Validation)
장점: 즉각적 피드백, 오류 조기 발견
단점: 입력 중 방해, 성능 부담
적용: 이메일 형식, 비밀번호
포커스 해제 시 검증 (On Blur)
장점: 입력 완료 후 검증, 덜 방해됨
단점: 피드백 지연
적용: 대부분의 필드, 중복 확인

Navigation Patterns - 길찾기의 디자인

Navigation Patterns - 길찾기의 디자인
모바일 네비게이션의 진화
1. Hamburger Menu
장점: 공간 절약, 많은 메뉴 수용
단점: 발견성 낮음 (숨겨짐), 추가 탭 필요
사용: 보조 메뉴, 설정 등 자주 안 쓰는 기능
2. Tab Bar (하단 탭)
장점: 항상 보임, 한 손 조작 용이, 빠른 전환
단점: 3-5개 제한, 화면 공간 차지
사용: 주요 섹션 이동, 핵심 기능 접근
3. Navigation Drawer
장점: 계층 구조 표현, 풍부한 정보
단점: 화면 전환 필요,  컨텍스트 상실
사용: 복잡한 앱, 많은 카테고리

Navigation Patterns - 길찾기의 디자인
데스크톱 네비게이션 패턴
1. Top Navigation
구조: [Logo] [Menu1] [Menu2] [Menu3]     [Search] [User]
장점: 전통적, 익숙함, 브랜딩 공간
단점: 수직 공간 차지, 메뉴 개수 제한
2. Side Navigation
구조
├─ Menu1
├─ Menu2
│  ├─ Submenu1
│  └─ Submenu2
└─ Menu3
장점: 많은 메뉴 수용, 계층 구조 명확
단점: 수평 공간 차지 모바일 어려움

Break Time

Icons & Iconography System
왜 아이콘 시스템이 필요한가?
아이콘의 힘:
언어 장벽 극복
공간 효율성
빠른 인지
브랜드 정체성
시스템 없는 아이콘의 문제:
같은 "삭제" 기능:
A 페이지: 🗑️ (쓰레기통)
B 페이지: ❌ (X 표시)
C 페이지: － (마이너스)
사용자: "이게 다 삭제인가?"

Icons & Iconography System
1. Grid System

Icons & Iconography System
2. Visual Consistency
선 두께 (Stroke Width)
일관된 두께 유지:
Regular icons: 2px
Small icons (16px): 1.5px
Large icons (32px+): 3px
Corner radius:
Sharp: 0px (기술적, 정확한)
Rounded: 2px (친근한, 부드러운)
스타일 일관성
Outlined (기본):
□ ○ △ ☆
가볍고 현대적
다양한 배경에 사용
Filled (강조):
■ ● ▲ ★
주목도 높음
선택 상태 표현

Icons & Iconography System
3. 의미의 명확성
Universal Icons (보편적 아이콘)
✓ 사용해도 좋은 것:
🏠 Home (집 = 홈)
🔍 Search (돋보기 = 검색)
⚙️ Settings (톱니바퀴 = 설정)
📧 Email (봉투 = 이메일)
✗ 주의해야 할 것:
💾 Save (플로피 디스크 - 젊은 세대는 모름)
📎 Attachment (클립 - 문화권별 차이)

Icons & Iconography System
1. Icon + Text 조합 레이블과 함께 사용
추천 조합:
[🏠] 홈       - 아이콘 + 텍스트
[⚙️] 설정     - 명확한 의미 전달
아이콘만 사용 가능:
[❌] - 닫기 (보편적)
[←] - 뒤로 (플랫폼 관습)
2. SVG 아이콘 (권장)
선명한 품질 (벡터)
색상 변경 용이
애니메이션 가능
접근성 우수

Illustrations System
언제 일러스트를 사용하는가?
1. Empty States
빈 검색 결과:
    🔍 (일러스트)
"검색 결과가 없어요"
"다른 키워드로 검색해보세요"
2. Onboarding
기능 설명:
[일러스트: 손가락이 버튼 가리킴]
"여기를 눌러 시작하세요"
3. Success/Error States
성공: 🎉 축하 일러스트
오류: 😢 공감 일러스트

Illustrations System
1. Visual Style
스타일 스펙트럼: 사진같은  ←――――――→ 기하학적
일관성 요소
Line weight: 3px (consistent)
Color palette: Brand colors only
Complexity: Simple > Complex
시선: 정면을 향함
2. 캐릭터 시스템
일관된 캐릭터:
비율 일정
표정 라이브러리
포즈 가이드라인
피해야 할 것:
성별 고정관념
문화적 편견
과도한 의인화

Empty States & Error Handling
기본 구성요소
1. Illustration (상황 설명)
2. Title (무슨 일?)
3. Description (왜?)  
4. Action (무엇을 할까?)

Empty States & Error Handling
1. First Use (첫 사용)
📝 "아직 작성한 글이 없어요"
"첫 글을 작성해보세요"
[글쓰기 시작하기]
2. No Results (결과 없음)
🔍"검색 결과가 없습니다"
"다른 키워드로 검색하거나
필터를 조정해보세요"
[필터 초기화]
3. Error State (오류)
⚠️ "일시적인 오류가 발생했어요"
"잠시 후 다시 시도해주세요"
[다시 시도]

Empty States & Error Handling
Error State Patterns
1. Error Prevention - 사전 검증
실시간 유효성 검사:
입력 중 피드백
제출 전 확인
명확한 제약사항 안내
2. Error Recovery - 복구 지원
자동 저장: "작성 중인 내용이 저장되었습니다"
되돌리기: "실수로 삭제하셨나요?" [복구]
3. Error Communication - 친근한 에러 메시지
❌ "Error 500: Internal Server Error"
✅ "앗, 문제가 생겼어요. 잠시만 기다려주세요."
❌ "Invalid input format"  
✅ "이메일 형식이 맞지 않아요. (예: user@email.com)"

Modal & Overlay System
모달 사용 사례
중요한 정보 전달
사용자에게 피드백을 요청하는 경우
사용자 행동 수정을 위한 정보 제공
최근 사용자 행동 확인
옵션 수정 확인
레이저 포커싱
하나의 특정 작업에 집중
자체 포함된 프로세스
사용자를 일반적인 흐름에서 벗어나게 함
제한된 시간 동안
예시: 업로드된 이미지 편집, 상태 업데이트

Modal & Overlay System

Modal & Overlay System
Modal (모달)
용도: 중요한 작업, 확인 필요
특징:
배경 dim (overlay)
Focus trap
ESC로 닫기
Popover (팝오버)
용도: 간단한 정보, 도구
특징:
특정 요소 기준 위치
작은 크기
클릭 outside 닫기

Modal & Overlay System
크기 시스템
Small: 400px (확인 대화상자)
Medium: 600px (기본 폼)
Large: 800px (복잡한 내용)
Full: 90% (갤러리 등)
위치와 애니메이션
진입: Fade in + Scale up
위치: 화면 중앙 (또는 상단 1/3)
종료: Fade out + Scale down

Notification System
1. Toast Notifications
위치: 화면 하단 중앙
지속: 3-5초 자동 사라짐
용도: 간단한 피드백
예:
[✓] 저장되었습니다
[!] 네트워크 연결 확인
2. Alert Messages ->
3. Banner Notifications
System-wide Messages
상단 고정 배너:
[🔔 새로운 기능이 추가되었습니다. 자세히 보기 →]

Notification System
Notification Priority - 우선순위 시스템
Critical: 즉시 주목 필요
Modal dialog
사용자 액션 필요
High: 중요하지만 방해 X
Toast with action
수동 dismiss
Medium: 정보 전달
Auto-dismiss toast
Status update
Low: 부가 정보
Badge update
Silent update

Motion & Interaction
1. 상태 변화 안내
Before → After, □ → ✓
단순 전환: 뭔가 바뀐 것 같은데?
애니메이션: 아, 체크가 됐구나!
2. 공간적 관계 표현
슬라이드 전환: ← 이전 | 현재 | 다음 →
"같은 레벨에서 이동 중"
상하 전환:
"더 깊은 레벨로 들어감"
"상위 레벨로 나감"
3. 주의 끌기
Subtle: 작은 진동, 색상 변화
Medium: 바운스, 펄스
Strong: 쉐이크, 플래시

Motion & Interaction

Motion & Interaction
Duration Scale
Instant (0ms)
색상 변화
텍스트 변화
Fast (100-200ms)
호버 효과
토글 스위치
Normal (200-300ms)
모달 열기
탭 전환
Slow (300-500ms)
페이지 전환
복잡한 애니메이션

Motion & Interaction
Easing Functions
Linear: 일정한 속도
로딩 바
무한 회전
Ease-out: 빠르게 시작, 천천히 끝
대부분의 UI 애니메이션
자연스러운 느낌
Ease-in: 천천히 시작, 빠르게 끝
사라지는 요소
주의: 답답할 수 있음
Spring: 튕기는 효과
즐거운 피드백
성공 애니메이션

좋은 문서의 구조
1. Overview (개요)
무엇인가?
언제 사용하나?
언제 사용하면 안 되나?
2. Anatomy (구조)
구성 요소 설명
각 부분의 역할
수정 가능한 속성
3. Behavior (동작)
상태별 변화
인터랙션 방식
엣지 케이스

좋은 문서의 구조
4. Do & Don't
올바른 사용 예시
잘못된 사용 예시
이유 설명
5. Accessibility
키보드 내비게이션
스크린 리더 대응
WCAG 준수 사항

문서는 살아있어야 한다
Bad: PDF 문서
업데이트 어려움
찾기 어려움
곧 outdated
Good: 웹 기반 시스템
실시간 업데이트
검색 가능
인터랙티브 예시

Accessibility - 모두를 위한 디자인
접근성이 비즈니스에 미치는 영향
전 세계 15% 인구가 장애 보유
40세 이상 40%가 작은 글씨 읽기 어려움
색맹 남성 8%, 여성 0.5%
비즈니스 관점:
접근성 개선 = 시장 확대
더 많은 사용자 = 더 많은 수익
법적 리스크 감소 = 비용 절감

실전 접근성 체크리스트
1. Color Contrast
텍스트 대비:
Normal text: 4.5:1
Large text (18pt+): 3:1
UI components: 3:1
체크 도구:
Chrome DevTools
Figma Plugin
WebAIM Contrast Checker

실전 접근성 체크리스트
2. Touch Targets
최소 크기:
iOS: 44×44 px
Android: 48×48 dp
Web: 44×44 px
여백 포함:
실제 버튼: 32px
터치 영역: 44px
3. Keyboard Navigation
체크 사항:
Tab으로 모든 요소 접근 가능
포커스 표시 명확
Tab 순서 논리적
Esc로 모달 닫기
Enter로 버튼 실행

디자인 시스템 운영을 위한 액션 아이템
1. 현재 상태 진단
□ 우리 제품의 버튼은 몇 종류인가?
□ 색상 코드는 통일되어 있는가?
□ 팀원들이 같은 용어를 쓰는가?
□ 신규 개발 시 참고할 기준이 있는가?
2. 첫 걸음
Week 1: 점검
현재 사용 중인 UI 요소 수집
불일치 패턴 발견
Week 2-3: 정의
핵심 컴포넌트 5개 선정
기초 요소 정의 (색상, 텍스트, 간격)
Week 4: 시범 적용
신규 기능에 적용
피드백 수집

디자인 시스템 운영을 위한 액션 아이템
3. 장기 로드맵
Phase 1 (1-3개월): Foundation
기초 요소 정립
핵심 컴포넌트
Phase 2 (3-6개월): Expansion  
컴포넌트 확대
패턴 라이브러리
Phase 3 (6-12개월): Maturity
전체 제품 적용
자동화 도구
팀 문화 정착

디자인 시스템 운영을 위한 액션 아이템
디자인 시스템은:
한 번에 완성되지 않는다
모든 것을 포함할 필요 없다
팀과 함께 성장한다
수단이지 목적이 아니다
성공의 열쇠:
작게 시작하되 크게 생각하라
완벽보다 개선에 집중하라
가치를 증명하고 전파하라
사람을 시스템보다 우선하라

개인 과제
인터넷에서 공개된 디자인 시스템 웹사이트를 하나 선택해 방문합니다.
사이트에 정의된 디자인 시스템의 구성 요소들을 살펴보고, 어떤 방식으로 정리되고 설명되어 있는지 학습한 내용을 바탕으로 확인해 봅니다.
더 효과적인 제품 디자인 및 개발을 위해 특별히 고려된 요소들을 발견하고, 이것이 어떻게 팀의 협업과 개발 속도를 높이는지 분석해 봅니다.
해당 제품의 핵심 사용자나 사용 맥락에 맞춰 특별히 설계된 고유 요소들을 발견하고, 왜 이 제품에만 이런 특별한 규칙이 필요했는지 분석해 봅니다.

질의응답 & 토론

수고하셨습니다
