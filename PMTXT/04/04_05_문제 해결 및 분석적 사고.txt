문제 해결 및 분석적 사고(5)
시스템 사고와 프로덕트

사전 질문(15분)
제품의 성과가 나빠졌을 때, 어떤 식으로 문제를 접근해야 해결할 수 있을까요?

복잡한 문제를 효과적으로 다루기 위해서는 어떤 식으로 문제를 바라봐야 할까요?

사전 질문 토론
✅ 제품 성과가 나빠졌을 때의 문제 접근 방식 
데이터와 고객 피드백을 기반으로 원인을 분석한다.
성과 저하의 시점과 원인을 명확히 구분하고 구조적으로 파악한다.
내부 요인과 외부 요인을 나누어 문제의 성격을 판단한다.
실패를 학습 기회로 보고 빠르게 다음 실행을 준비한다.
✅ 복잡한 문제를 효과적으로 바라보는 방식
문제를 작게 쪼개어 단계별로 나누어 본다.
전체 시스템 안에서 인과관계와 연결성을 고려한다.
다양한 관점과 도구(시각화, 분류, 분석)를 활용한다.
중요도와 영향력을 기준으로 우선순위를 정해 접근한다.

Case: 인원을 투입하면 성과가 나올까
훌륭한 마케팅 역량으로 성공적인 매출을 올리고 있었던 교육 플랫폼
하지만 프로덕트 기반의 성장이 아닌 점을 해소하고 싶어했다.
이를 해결하기 위해 프로덕트 팀을 새롭게 조직
그동안 벌어들인 수익을 활용해 수십명의 프로덕트 팀원들을 신중하게 선발
체계적으로 업무 구조를 잡고 기존의 제품을 새롭게 개편하는 프로젝트를 시작

6개월 후 결과는?

6개월동안 아무것도 만들어내지 못했다
기존의 제품의 레거시가 심각해 새로 만들어야만 하는 상황
그런 와중에 팀 리빌딩을 위해 기존 제품 유지보수 인원을 전부 정리
새로운 제품을 기획하는 과정에서 기존 레거시를 어떻게 수용해야 할지 전략 부족
처음부터 새로 만드는 과정에서 새로 합류한 인원들 간의 손발이 맞지 않음
너무 많은 리더들의 개별적인 의사결정으로 의사결정이 연결되지 않음

이런 문제가 발생한 원인은 무엇이었을까?

문제의 원인이 하나일 수는 없다
기존의 원인 분석: 지금 구성원들의 역량이 부족해 발생한 문제
해결 방안: 더 좋은 팀을 구성하면 문제를 해결할 수 있을 것이다.

문제의 원인이라는 것이 저렇게 간단하게 정의될 수 있을까?
회사 내에 존재하는 수많은 요소들 중 하나만 관리하면 문제를 해결할 수 있을까?
“문제 전체를 조망할 수 있는 종합적 사고가 필요하다"

PM의 제품 분석에서
갑자기 이번달 유료 결제수가 30% 감소하였다. 원인은?

결제 모듈에 지난번에 해결 안된 작은 버그가 있긴 한데…
이번달 달러 환율이 올랐는데 그게 문제일까?
마케팅 콘텐츠를 안바꾼지 오래 되었는데 효과가 떨어진건가?
지난주에 새로 런칭한 기능이 오히려 구매에 악영향을 주고 있나?
이번달 물가지수가 예상보다 더 많이 상승했다던데…
앱스토어 순위가 떨어졌네, 이것때문에 유입이 줄어들었나?

문제의 원인을 명확하게 파악하려면
전체 시스템을 볼 줄 아는 능력이 필요하다

시스템 사고란 무엇인가?
세상을 여러 부분으로 나누는 것이 아니라 전체와 관계의 관점에서 바라봄으로써 세상의 복잡성을 이해하는 방법
기존의 분석적 사고가 환원주의에 기반하여 대상을 쪼개어 나가는데에 비해
시스템 사고는 전일주의(holism)에 기반하여 대상을 살아있는 유기체로 보며 부분을 넘어선 전체를 파악한다

"나무를 보되 숲을 놓치지 않는다"

선형적 사고 vs 시스템적 사고
선형적사고:  문제의 원인을 하나로 보고, 그 원인이 결과를 직접 만든다고 생각하는 사고 방식
문제가 생겼다 → 누군가 잘못했나?
성과가 안 난다 → 사람이 부족한가?
일정이 밀린다 → 더 투입하면 되겠지?
매출이 줄었다 → 마케팅 때문이겠지?
시스템적 사고: 여러 요소들이 상호작용하며, 문제가 구조적으로 발생한다고 보는 사고 방식
문제가 생겼다 → 어떤 구조 속에서 반복되는 걸까?
성과가 안 난다 → 협업 방식, 목표 설정, 보상 체계는 어땠지?
일정이 밀린다 → 의사결정 구조나 업무 흐름에 병목이 있었나?
매출이 줄었다 → 외부 환경, 기능, 유저 경험이 어떻게 연결됐지?

선형적 사고 vs 시스템적 사고
항목
선형적 사고 (Linear Thinking)
시스템적 사고 (Systems Thinking)
기본 관점
원인 → 결과의 단순 인과관계로 문제를 이해
요소 간 상호작용과 피드백 루프를 통해 문제를 이해
문제 해결 방식
"A가 문제니 B로 해결하자"
"A, B, C가 연결돼 있으니 전체 흐름과 구조를 바꾸자"
분석 방법
문제를 쪼개어 각 요소를 따로 분석
요소 간 관계와 구조를 함께 분석
초점
단일 원인과 단일 해결책
전체 시스템 내의 패턴과 연결 구조
위험 요소
국소 최적화로 인해 오히려 전체 성과 악화 가능성
변화가 다른 부분에 어떤 영향을 미치는지 예측 가능
비유
기계 고장 → 고장난 부품만 교체	
생태계 변화 → 다양한 생물과 환경의 균형 고려

앞 사례로 돌아가 보면?
선형적 사고:
“기존 팀의 역량이 부족하니, 더 좋은 팀을 꾸리면 된다.”

시스템적 사고:
“조직 구조, 의사결정 방식, 제품의 기술 부채, 팀 간 협업 구조 등
전체 시스템이 어떻게 연결돼 있었는지를 분석해야 한다.”

시스템적 사고의 핵심 개념

1. 상호연결성 (Interconnectedness)
시스템적 사고는 모든 것이 연결되어 있다는 전제에서 출발함
어떤 것도 고립되어 존재하지 않으며, 생존과 기능을 위해 다른 요소에 의존함
세상을 고립된 조각이 아니라 관계의 네트워크로 바라보는 시각


1. 상호연결성 (Interconnectedness)
마케팅 콘텐츠와 사용자 유입 수, 제품 기능과 고객 이탈률은 별개의 것이 아니라 연결됨
예: 유저 인터뷰에서 발견된 불만이 실제 결제 전환율에까지 영향을 미침
개별 수치나 현상만 보고 판단하면 오판 가능→ 연결된 요소들을 파악하고 설계해야 정확한 인과 관계를 이해 가능

2. Synthesis (종합적 사고)
기존의 분석(Analysis)이 나누어 이해하는 방식이라면,
종합(Synthesis)은 전체를 보며 연결된 맥락을 이해하는 방식
"부분을 알면 전체를 안다"는 환원주의를 넘어
"전체는 단순한 부분의 합이 아니다"라는 전일주의 기반

2. Synthesis (종합적 사고)
신규 기능의 성공 여부는 개발 품질만으로 결정되지 않음
→ 사용자의 상황, 기대, 기존 플로우와의 연결 속에서 판단해야 함
예: 버그 수정 이후에도 이탈률이 높다면, 이는 기능 자체보다
사용자 흐름 내에서 기능이 끼어든 방식이 문제일 수 있음
데이터, 정성적 피드백, 조직 구조까지 함께 고려해야 함

3. Emergence (창발)
여러 요소가 모일 때 예상치 못한 새로운 특성이나 행동이 등장하는 현상
개별 요소엔 없던 특성이 관계 속에서 ‘출현’
예: 벌 하나하나는 단순하지만, 벌집이라는 구조는 집단 내 상호작용에서 창발

3. Emergence (창발)
기능 A, B, C는 각각 정상 작동하지만, 함께 놓이면 전환율 하락 → 개별 문제 없음 → 구성의 방식에서 문제가 생긴 창발현상
팀 빌딩도 유사: 뛰어난 개인이 모였지만 팀워크가 어긋나는 경우
따라서, "각각이 좋은가?"보다 "함께 놓였을 때 어떤 특성이 생기나?"를 봐야 함

4. Feedback Loops (피드백 루프)
시스템 내의 요소들이 서로 영향을 주고 받는 반복 구조
두 가지 루프 유형:
강화 루프 (Reinforcing loop): 변화가 더 큰 변화를 유발 (ex. 바이럴 마케팅)
균형 루프 (Balancing loop): 변화가 일정 선에서 안정됨 (ex. 온도 조절기)

4. Feedback Loops (피드백 루프)
기능 하나가 불편 → 고객 이탈 → 리뷰 악화 → 신규 유입 감소 → 매출 하락→ 강화 루프가 부정적으로 작동 중
반대로, 피드백 설계를 통해 지속적 개선과 성장의 선순환도 가능
예: 온보딩 개선 → 유저 초기 이탈 감소 → 피드백 증가 → 제품 품질 개선 → 유지율 증가

5. Causality (인과성)
단순한 “A → B” 인과가 아니라,
시스템 내에서의 다층적, 복합적 인과관계를 이해하는 것이 핵심
원인과 결과는 고정되지 않으며, 시간에 따라 바뀌고 상호작용함

5. Causality (인과성)
예: “결제율이 떨어졌다 → 최근 기능 때문”→ 실제로는 환율, 마케팅 타겟, 사용자 수 증가에 따른 고객군 변화 때문일 수도
원인을 단일화하면 빠르지만, 틀릴 확률도 크다
데이터를 단순히 비교하지 말고, 시간 흐름과 피드백 경로 속에서 분석해야 함

시스템적 사고 vs 디자인 사고
시스템적 사고
전체 시스템을 이해하려는 분석적·관계 중심의 사고 방식
변화의 패턴과 상호작용을 파악
복잡한 문제 해결에 적합
디자인 사고
사람 중심의 창의적 문제 해결 방식
빠른 실행, 실험, 반복을 통해 혁신 도출
사용자 니즈에 집중

디자인 사고 vs 시스템적 사고
항목
디자인 사고(Design Thinking)
시스템적 사고 (Systems Thinking)
성격
감각적, 실험적, 실행 중심
분석적, 추상적, 전체적	
초점
사람, 니즈, 경험
관계, 구조, 패턴	
목적
사용자 중심의 솔루션 도출
시스템의 이해와 구조적 변화	
방법론
공감, 아이데이션, 프로토타이핑
맵핑, 루프 분석	
한계
시스템 구조를 간과할 수 있음
실행력 부족, 추상화에 머물 수 있음	

시스템 사고의 장단점
장점
복잡한 문제의 구조를 깊이 이해
다양한 이해관계자 관점 반영 가능
예상치 못한 부작용 예방
거시적 전략 도출에 유리
단점
실행으로 연결되지 못할 위험
인간 중심 요소가 배제될 수 있음
너무 많은 분석으로 의사결정 지연 가능

디자인 사고의 장단점
장점
사용자 니즈를 직접 반영
빠른 반복과 학습이 가능
창의적 솔루션 도출에 유리
팀의 창의 자신감 강화
단점
비선형 프로세스로 혼란 유발 가능
구조적 원인을 놓치고 ‘현상’만 다룰 수 있음
조직 내 문화 변화가 요구되므로 적용에 시간 필요

인간 중심 시스템 사고 (Human-Centered Systems Thinking)
사람의 니즈와 시스템 구조를 동시에 고려하는 통합적 사고 방식
관계와 구조를 이해하면서, 현실에서 작동하는 솔루션 설계
복잡한 사회적 문제에 효과적
공감 + 구조 분석 → 변화 설계

인간 중심 시스템 사고의 도구들
1. 빙산 모델 (Iceberg Model)
복잡한 시스템에서 문제를 해결하려면 전체 그림을 고려하고, 문제의 근본 원인을 드러내야
시스템의 여러 층위(행동, 구조, 사고방식)를 드러내는 데 사용되는 프레임워크
눈에 보이는 현상에서 출발하여 시간 흐름에 따른 패턴을 관찰하고
그 아래에 존재하는 더 깊은 구조적 요인들을 파악하며
근저에 있는 사고방식과 인식을 표면 위로 드러냅니다.


인간 중심 시스템 사고의 도구들
2. 시스템 맵 (Systems Map)
특정 시스템 내 이해관계자들 간의 모든 관계와 상호작용을 시각적으로 정리
빈 종이에 시스템 내 모든 이해관계자를 적습니다 → 눈에 보이는 당연한 대상 너머까지 생각해보세요.
각 요소 간 연결 관계를 나타내기 위해 화살표를 그려보세요 → 어떤 요소들이 서로 영향을 주고받는지 파악할 수 있습니다.
특히 더 깊이 들여다보고 싶은 영역에 대해 질문을 던져보세요. → 어떤 부분에 의문이나 정보의 공백이 있는지 살펴보세요.


함께 사용할 때 더 강력하다
디자인 사고만 사용하면 구조적 이해 부족
시스템 사고만 사용하면 실행력 부족
두 가지를 통합하면→ 인간 중심적이면서도 구조적으로 지속 가능한 솔루션 도출 가능

Break Time

시스템적 사고로 문제 바라보기
문제를 보는 시야 넓히기
단편적인 원인 찾기에서 벗어나, 문제의 복합적 맥락 이해하기
시스템 전체의 구조와 관계를 고려하는 관점 전환
시스템적 사고의 도입 효과
숨겨진 원인 발견
근본적이고 지속 가능한 해결책 설계 가능

제품 생태계와 시스템 - 경계 정의하기
경계의 정의: 제품의 시작과 끝을 명확히 설정
경계 설정 중요성: 책임 영역과 관리 가능한 범위 명확화
범위 설정의 영향: 자원 분배, 우선순위 결정
경계의 진화: 시간이 지나면서 환경 변화에 따라 조정 필요

제품 생태계와 시스템 - 내부 시스템
제품 내 여러 기능이 상호작용하여 시스템 형성
각 기능 간 상호의존성 이해 중요
기술 구조와 UX는 별개가 아니라 연결된 시스템
내부 시스템의 균형이 제품 안정성을 결정

제품 생태계와 시스템 - 외부 시스템
제품은 시장, 경쟁사, 규제 등 외부 환경과 연결됨
외부 환경의 변화는 제품 성과에 직접적 영향
시장 트렌드 및 기술 변화에 지속적 적응 필요
외부 시스템과의 관계에서 제품 진화 방향 결정

제품 생태계와 시스템 - 이해관계자 맵핑
제품은 다양한 이해관계자의 영향을 받음
이해관계자 유형: 사용자, 개발자, 파트너, 규제 기관 등
직접적/간접적 이해관계자 구분
맵핑을 통해 관리 우선순위 파악 및 전략적 소통

제품 생태계와 시스템 - 이해관계자 간의 관계와 상호작용
이해관계자 간 관계는 권력 역학 관계로 나타남
공식적 및 비공식적 영향력 파악 필요
영향력 네트워크 분석으로 숨겨진 관계 발견 가능
효과적인 협력을 위해 관계의 투명한 시각화 필요

제품 생태계와 시스템 - 이해관계자 갈등과 조화
다양한 이해관계자의 요구는 상충할 수 있음
일반적인 갈등 패턴 식별하고 대응 전략 수립
시스템 관점으로 갈등을 조화와 균형으로 전환
전략적 우선순위 설정을 통한 갈등 예방

제품 생태계와 시스템 - 터치포인트와 여정 매핑
고객이 경험하는 모든 접점(터치포인트) 파악
사용자 여정의 단계별 주요 터치포인트 관리 중요
터치포인트 일관성은 사용자 경험의 품질 결정
터치포인트 개선을 통한 고객 경험 최적화 전략

제품 생태계와 시스템 - 다양한 뷰와 계층
제품 이해는 다층적 접근 필요 (표면적↔심층적)
프론트스테이지 (사용자 경험 중심) vs. 백스테이지 (기술적 운영)
다양한 시각을 통합하여 총체적 제품 관리
제품 전체에 걸친 일관된 관리와 운영 중요성 강조

제품 생태계와 시스템 - 생태계 기반 제품 진화 사례
슬랙(Slack)의 진화 사례 분석
초기 목적: 팀 내 소통을 위한 단순한 내부 협업 도구
현재 상태: 글로벌 협업 플랫폼으로 성장
→ 외부 환경 변화(원격 근무 확산)에 빠르게 대응
→ 내부 피드백 및 데이터 기반으로 신속한 제품 확장 결정
→ 변화하는 사용자의 니즈 지속적 반영

제품 생태계와 시스템 - 생태계 기반 제품 진화 사례
슬랙(Slack)의 앱 생태계 구축 전략
앱 생태계 구축으로 자체 생태계 형성
API 제공으로 다양한 외부 서비스와 쉽게 연결
파트너와의 상호작용을 통해 지속 가능한 가치 확장
핵심 성공 요인:
외부 참여자를 위한 명확한 생태계 규칙 제공
지속적인 API 관리와 기술 지원
타 서비스와의 상호 이익을 극대화하는 전략적 협력

복잡성과 불확실성 - 예상치 못한 결과
복잡함(Complicated):: 요소는 많으나 관계가 명확하고 예측 가능
복잡성(Complex):: 관계가 상호작용하며 예측 불가능한 결과 창발
복잡성 특징:
창발적(emergent) 속성
비선형적 인과 관계로 예상 못한 결과 초래
부분의 합 이상인 새로운 특성 등장
제품 개발에서의 창발성 사례:
특정 기능이 예기치 않은 고객 행동을 유발
사용자 니즈와 시장 반응이 기존 예측과 달라짐

복잡성과 불확실성 - 복잡성은 어디서 오는가?
기술적 복잡성: 코드베이스, 아키텍처의 규모와 연결 구조
사용자 복잡성: 다양한 니즈와 요구사항 변화, 사용 방식의 다변화
조직적 복잡성: 팀 간 커뮤니케이션 문제, 의사결정 지연 및 충돌
시장 복잡성: 경쟁사 등장 및 기술 트렌드 변화, 규제 환경 변화

복잡성과 불확실성 - 탐색적 의사결정 방법
옵션 사고(Options Thinking): 복수의 가능성을 열어두고 단계적 결정
시나리오 플래닝(Scenario Planning): 다양한 미래 가능성에 대비한 미리보기 전략
실시간 의사결정(Real-time Decision Making): 변화에 빠르게 반응하는 민첩한 결정 구조
의도적 학습 루프(Deliberate Learning Loops): 빠르게 실험하고, 피드백을 얻어 전략 수정

복잡성과 불확실성 - 가설 기반 제품 개발
명확한 가설 설정과 최소 기능 제품(MVP) 개발
빠른 검증 및 사용자 피드백 기반 지속적 학습
실험을 통해 얻은 인사이트를 제품 전략에 반영
성공적인 가설 기반 제품 개발의 핵심:
명확한 학습 목표 설정
빠른 사이클로 가설 검증 및 반복
학습 중심 조직 문화 구축

복잡성과 불확실성 - 불확실성을 기회로 전환한 사례
에어비앤비(Airbnb)의 초기 불확실성 극복 사례
초기에 명확한 비즈니스 모델이 없던 상태
작은 실험들로 빠르게 사용자 반응을 검증
실패를 통해 얻은 데이터를 기반으로 신속한 피벗(pivot) 결정
단기적 생존과 장기적 비전 사이의 균형 유지
핵심 전략:
최소 가정 기반의 신속한 실험
데이터와 직관의 균형 잡힌 활용
조직 내 실험과 학습 문화 장려

피드백 루프와 학습 시스템 - 강화 피드백
강화 피드백(Reinforcing Feedback) 특징:
변화가 더 큰 변화를 일으키는 구조
긍정적 예시: 네트워크 효과, 바이럴 확산
부정적 예시: 고객 이탈 증가로 인한 지속적 매출 감소
관리 전략:
긍정적 루프는 강화, 부정적 루프는 조기 차단

피드백 루프와 학습 시스템 - 균형 피드백과 지연
균형 피드백(Balancing Feedback) 특징:
시스템의 안정성과 지속성을 유지하는 메커니즘
현재 상태와 목표 상태 간의 격차를 조정
지연(Delay)의 문제:
피드백 지연이 장기적 악영향 초래 가능
피드백 속도와 정확성 관리 필수

피드백 루프와 학습 시스템 - 의도적인 피드백 루프 만들기
피드백 채널과 데이터 수집 체계 설계
주기적인 피드백 분석과 조치 계획 수립
신속한 학습 및 제품 개선을 위한 운영 체계 구축

“우리 제품의 핵심 피드백 루프는 무엇인가?”

피드백 루프와 학습 시스템 - 실패로부터의 학습 문화
심리적 안전 보장, 실패를 학습 기회로 활용
정기적인 실패 리뷰 세션 (비난 없는 분석)
성과 평가를 학습과 성장 중심으로 전환

"실패를 허용하고 권장하는 문화가 혁신을 촉진한다."

피드백 루프와 학습 시스템 - 지속적인 피드백
고객의 목소리를 상시적으로 듣는 시스템 구축
정성적(사용자 인터뷰), 정량적(데이터) 분석의 결합
피드백을 기반으로 신속한 제품 개선 및 전략 수정
피드백 주기와 방식 최적화로 제품 민첩성 향상

변화 관리와 적응력 - 적응형 조직
빠르게 변화하는 환경에 신속히 대응 가능한 조직 구조
적응형 조직의 주요 특징:
자율적인 의사결정과 빠른 실행
개방적인 커뮤니케이션과 투명한 정보 공유
조직 내 빠른 학습과 피드백 수용
관료적 구조 vs 적응형 구조:
관료적 구조는 안정성은 있으나 변화 대응력 낮음
적응형 조직은 높은 변화 대응력으로 경쟁 우위 확보

변화 관리와 적응력 - 왜 변화는 어려운가?
변화를 어렵게 만드는 핵심 요인:
개인의 심리적 저항: 익숙한 것을 유지하려는 본능적 성향
조직적 저항: 기존 프로세스, 규범, 관행의 강력한 유지력
시스템적 요인: 서로 연결된 구조로 인해 변화 파급효과 복잡
변화 저항을 관리하는 방법:
저항을 조기 인지하고 투명한 소통으로 신뢰 확보
참여를 통한 변화 수용도 증진 전략
명확한 변화의 목적과 긍정적 비전 제시 필요

변화 관리와 적응력 - 복원력 구축 전략
복원력(Resilience): 예측 불가능한 충격이나 위기에도 시스템이 회복하고 성장하는 능력
복원력 구축의 핵심 요소:
다양성과 중복성: 리스크 분산과 단일 실패점 방지
모듈화된 시스템: 독립적 모듈로 충격 최소화
빠른 회복력: 신속한 문제 해결 및 정상화 능력
“복원력은 위기 상황에서 조직의 생존을 결정하는 핵심 역량이다.”

변화 관리와 적응력 - 집단 지성으로의 전환
집단 지성(Collective Intelligence): 조직 전체가 공유된 지식을 통해 더 나은 결정을 내리는 능력
집단 지성 촉진 방법:
문서화와 지식 관리 시스템 구축
멘토링, 페어 프로그래밍 등 상호 학습 촉진 활동
교차 기능적 협업 프로젝트로 다양성 증대
지속적인 내부 교육과 경험 공유 문화 구축
“조직의 경쟁력은 개인의 지식이 아닌 공유된 지식에서 나온다.”

변화 관리와 적응력 - 유연한 팀 구조의 힘
유연한 팀 구조의 장점:
변화하는 환경에 따라 빠른 팀 재구성 가능
각 팀원의 강점을 최대한 활용
문제 발생 시 신속한 자원 재배치로 대응 가능
효과적인 재팀 구성 원칙:
명확한 목표와 역할의 사전 정의
정기적 재구성 주기 설정
구성원 간 심리적 안전 보장과 사회적 연결 유지

변화 관리와 적응력 - 제품 관리자의 역할
불확실성 시대, 제품 관리자의 핵심 역할:
명확한 비전 제시 및 공유
상황 변화에 따른 빠른 전략적 대응
조직 내 소통과 정보 투명성 확보
실험을 적극 권장하고 실패를 학습으로 연결하는 문화 구축

질의응답 & 토론

사전 질문(15분)
제품의 성과가 나빠졌을 때, 어떤 식으로 문제를 접근해야 해결할 수 있을까요?

복잡한 문제를 효과적으로 다루기 위해서는 어떤 식으로 문제를 바라봐야 할까요?


수고하셨습니다
