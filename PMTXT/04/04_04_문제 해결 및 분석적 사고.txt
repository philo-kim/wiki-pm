문제 해결 및 분석적 사고(4)
디자인 사고와 스프린트

사전 질문(15분)
고객의 문제를 해결하는 ‘최적’의 솔루션을 찾을 수 있는 방법은 무엇일까요? 그 방법이 최적을 솔루션을 찾을 수 있다고 생각하는 이유는 무엇인가요?

실제 제품 개발 과정에서 새로운 솔루션을 적용하고 검증하는데 필요한 최소한의 시간은 대략 어느정도 일까요? 그렇게 생각한 이유는 무엇인가요?

사전 질문 토론
✅ 최적의 솔루션을 찾는 방법에 대한 공통된 입장
문제를 정확히 정의하고 고객 입장에서 생각해야 한다.
아이디어는 가설일 뿐, 작게 시도하고 빠르게 검증하며 개선한다.
실현 가능성과 시장성도 함께 고려해야 한다.
✅ 검증에 필요한 시간에 대한 공통된 입장
간단한 건 12주, 복잡한 건 16개월까지 걸릴 수 있다.
제품 복잡도와 리소스에 따라 다르지만, 피드백까지 포함해 충분한 시간이 필요하다.
빠르게 테스트하고 점진적으로 개선하는 방식이 현실적이다.

Case: 제품 개발에 2년이 걸린다면
새로운 시장에 진출하기 위한 전략을 수립 - 2개월
수립 전략에 맞춰 시장 분석 및 상위 기획 개발- 2개월
해당 기획에 맞춰 서비스 정의 및 상세 기획 작성 - 2개월
해당 기획에 맞춰 디자인 진행 및 기술 개발 검토 - 2개월
실제 서비스 개발 - 3개월
최종 QA 및 제품 출시 - 1개월
총 예상 기간 1년 하지만 중간의 무수한 수정으로 최종 개발기간은 2년
제품은 성공하였을까? 실패하였을까?

고객 문제를 해결하지도 못했고, 빠르게 하지도 못했다
2년간 수많은 인력이 서비스 개발에 투입되었지만, 의도한 대로 성과를 내지 못했다
만든 제품을 알리기 위해 수많은 마케팅 비용을 사용했지만 많은 유입을 만들지 못했다
그렇게 들어온 고객들 마저 제품을 조금 사용해보고 빠르게 이탈했다
결국 2년 걸려 만든 제품은 런칭 1년도 되지 않아 서비스 종료

체계적인 시스템 안에서 고객 문제를 해결하려 노력했지만 반대로 전혀 잘못된 제품이 나왔다.
그런 제품을 만들게 되는 과정조차도 예상한 시간보다 훨씬 오래 걸리게 되었다.
어떻게 해야 할까?

갑자기 디자인 사고?
원래 디자인 사고는 디자이너들의 사고법을 연구하기 위함에서 시작
디자이너들이 문제를 해결할 어떤 인지적, 전략적, 실용적 절차를 거치는가에 대한 연구
문제를 어떻게 추론하고 어떻게 솔루션을 개발해 내는가

하지만 이 사고가 새로운 시각으로 해석되기 시작

디자인 사고의 효과적인 문제 해결 능력
복잡한 문제 해결 능력: 비즈니스 환경이 점점 더 복잡하고 예측 불가능해지면서, 디자인 사고의 '까다로운 문제(wicked problems)' 해결 접근법이 유용
사용자 중심 접근: 소비자 기대치가 높아지면서 사용자 경험(UX)의 중요성이 부각되었고, 디자인 사고의 공감 단계는 이를 체계적으로 접근하는 방법을 제공
혁신 필요성 증가: 빠르게 변화하는 시장에서 기업들은 지속적인 혁신이 필요하게 되었고, 디자인 사고는 창의적 해결책을 도출하는 프레임워크를 제공

디자인 사고의 비즈니스로의 확대
IDEO의 영향: 디자인 컨설팅 회사로서 사용자 중심 디자인 방법론 개발 및 적용
경영 교육으로 확산: 비즈니스 스쿨에서 디자인 사고 교육 도입 시작
애플 효과: 애플의 혁신적 제품과 스티브 잡스의 디자인 중심 철학이 주목받음
IBM, 삼성, GE 등 글로벌 기업들이 디자인 사고를 전사적으로 도입
스타트업 생태계에서 린 스타트업(Lean Startup)과 디자인 사고의 결합
코로나19 이후 불확실성 증가로 적응력과 혁신이 중요해지며 디자인 사고의 가치 재조명


발산적 사고와 수렴적 사고의 반복

1단계: 공감 (Empathize)
✅ 목적
사용자(또는 문제 당사자)의 관점, 감정, 니즈, 맥락을 깊이 있게 이해하기 위함
내가 가진 선입견을 내려놓고, 사용자 중심의 시각을 갖추는 것이 핵심
✅ 왜 중요한가?
문제를 해결하기 위해서는 그 문제를 겪는 사람의 관점에서 바라봐야 진짜 원인을 알 수 있음
겉보기에는 단순한 문제처럼 보여도, 실제로는 심층적인 감정이나 동기가 숨겨져 있음

1단계: 공감 (Empathize)
✅ 주로 사용하는 방법들
인터뷰: 사용자의 말과 표정을 통해 니즈와 감정을 파악
관찰(Observation): 사용자의 행동을 몰래 혹은 함께 지켜보며 무의식적 습관이나 문제점 발견
참여 관찰: 사용자가 되어 직접 문제 상황을 체험함
공감 지도(Empathy Map): 사용자의 생각, 느낌, 말, 행동을 시각화해 이해도 향상
사용자 여정 맵(Customer Journey Map): 시간 흐름에 따라 사용자가 겪는 경험을 단계별로 정리


1단계: 공감 (Empathize)
✅ 체크 포인트
사용자의 말뿐만 아니라 비언어적 요소(표정, 몸짓)까지 주의 깊게 보기
사용자의 행동을 판단하거나 해석하기보다 있는 그대로 관찰하기
“왜 그런 행동을 했을까?”라는 질문을 계속 던지기

2단계: 문제 정의 (Define)
✅ 목적
공감 단계에서 얻은 정보를 바탕으로, 진짜 해결해야 할 문제를 명확히 정의하는 것
사용자의 니즈와 맥락을 바탕으로, 행동 가능한 문제 진술(statement)을 만드는 것이 목표
✅ 왜 중요한가?
문제 정의가 잘못되면, 아무리 훌륭한 아이디어도 엉뚱한 문제를 해결하게 됨
문제를 뭉뚱그려 두면 방향을 잡기 어렵고, 팀원 간 의사소통에도 혼란이 생김
이 단계는 이후 아이디어 발산 단계에 중심축 역할을 함

2단계: 문제 정의 (Define)
✅ 주요 활동과 도구
인사이트 도출: 공감 단계에서 얻은 정보를 분류하고 핵심 메시지를 추출
페르소나(Persona): 대표 사용자를 구체화한 가상의 인물. 니즈와 특성을 요약
문제 진술(Problem Statement): 사용자의 관점에서 정의한, 구체적이고 공감 가는 문제 설명
Point of View(POV) 문장: “__사용자__는 이유 때문에 __무언가__가 필요하다” 형식으로 표현
“20대 자취생인 수진이는 아침마다 바빠서 아침을 거르곤 한다. 수진은 빠르고 간편하게 먹을 수 있는 건강한 아침식사를 원한다.”

2단계: 문제 정의 (Define)
✅ 좋은 문제 정의의 조건
사용자 중심(User-Centered): 내가 아닌 사용자의 관점에서 쓰여야 함
구체적이고 명확(Specific): 추상적인 말 대신 실제 상황과 필요를 담아야 함
행동 유도(Actionable): 이 문제를 들었을 때 바로 아이디어를 떠올릴 수 있어야 함

3단계: 아이디어 도출 (Ideate)
✅ 목적
정의한 문제를 해결하기 위해, 다양하고 창의적인 해결책을 폭넓게 발산하는 것
이 단계에서는 정답보다는 가능성의 폭을 넓히는 것이 핵심이에요
✅ 왜 중요한가?
첫 아이디어가 항상 최선은 아님
여러 방향으로 생각해보면서 고정관념을 깨고, 혁신적인 해법을 찾아갈 수 있음
이 단계는 평가가 아니라 상상과 실험의 무대

3단계: 아이디어 도출 (Ideate)
✅ 주요 기법들
브레인스토밍: 팀원들이 빠르게 아이디어를 쏟아내는 대표 기법. 비판 없이 양을 늘리는 것이 목적
브레인라이팅: 종이에 써서 돌리며 아이디어를 확장. 말하기 부담이 있을 때 유용
SCAMPER: 기존 아이디어를 바꾸는 7가지 관점 (Substitute, Combine, Adapt 등)
Worst Possible Idea: 일부러 엉망진창 아이디어를 내며 고정관념을 깨뜨림
마인드맵: 중심 키워드에서 가지치기 하며 연관된 아이디어 확장

3단계: 아이디어 도출 (Ideate)
✅ 정리와 수렴
아이디어를 충분히 발산한 뒤에는, 효과적이고 실행 가능한 아이디어를 골라내는 작업이 필요해요
예: 투표, 영향력-실현가능성 매트릭스 등을 활용해 아이디어를 분류
✅ 핵심 마인드셋
판단은 잠시 멈추기: 이상해 보여도 일단 꺼내기
양이 질을 만든다: 아이디어는 많을수록 좋다
‘예, 그리고(Yes, and...)’로 반응하기: 다른 아이디어를 확장시켜보기
시선 바꾸기: 사용자, 어린이, 경쟁사, 미래 등 다양한 관점에서 생각해보기

4단계: 시제품 제작 (Prototype)
✅ 목적
아이디어를 눈에 보이고 만질 수 있는 형태로 구체화하여 실험하고 피드백을 받기 위함
완제품을 만드는 게 아니라, 빠르게 만들고 빠르게 실패해보기 위한 실험용 결과물
✅ 왜 중요한가?
머릿속 아이디어는 멋지게 들려도, 실제로 구현해보면 예상과 다른 경우가 많음
실행 전 검증을 통해 시간과 자원을 아낄 수 있음
사용자에게 보여주면, 말로 설명하는 것보다 훨씬 많은 피드백을 얻을 수 있음

4단계: 시제품 제작 (Prototype)
✅ 프로토타입의 형태
종이 모형: 종이로 만든 제품 모델, 앱의 와이어프레임 스케치 등
디지털 목업: 피그마, XD 등을 활용한 클릭 가능한 UI 프로토타입
역할극: 서비스 경험을 연기로 표현하는 ‘서비스 프로토타이핑’
스토리보드: 시나리오 형식으로 흐름을 시각화한 만화 형태
실제 제품의 축소판: 3D 프린팅, 목업 재료 등을 활용한 실물 형태


4단계: 시제품 제작 (Prototype)
✅ 프로토타입 제작 시 팁
완벽함보다 속도: 빠르게 만들고 테스트하는 게 더 중요해요
한 번에 하나씩 실험: 아이디어의 핵심 가정 한두 개만 담는 것이 효과적
사용자의 반응을 이끌어낼 수 있을 정도의 완성도만 확보하면 충분
✅ 프로토타입은 "대화 도구"
사용자와의 대화를 이끌어내는 훌륭한 도구예요
“이건 괜찮나요?”가 아니라
“이걸 쓰신다면 어떤 느낌일까요?”처럼 사용자의 의견을 유도하는 게 중요합니다

5단계: 테스트 (Test)
✅ 목적
프로토타입을 실제 사용자에게 사용해보게 하고, 피드백을 받아 개선점을 찾는 것
아이디어가 실제로 효과적인지, 사용자의 문제를 해결하는지 검증하는 단계
✅ 왜 중요한가?
디자이너의 관점이 아닌 사용자의 반응이 진짜 정답을 말해줌
제품/서비스의 약점, 오해의 소지가 있는 지점, 기대와 다른 점 등을 조기에 발견할 수 있음
테스트는 실패가 목적이 아니라, 학습이 목적이에요

5단계: 테스트 (Test)
✅ 테스트 방법
사용자 테스트 (Usability Test): 사용자가 직접 프로토타입을 사용하고 관찰자가 그 과정을 지켜봄
인터뷰: 사용 경험 후, 느낀 점과 불편한 점을 직접 묻는 방식
A/B 테스트: 여러 버전 중 어떤 것이 더 효과적인지 비교
생각하며 말하기 (Think-aloud): 사용자가 생각을 말하면서 프로토타입을 사용하게 하는 기법

5단계: 테스트 (Test)
✅ 테스트 중 유의사항
테스트는 정답을 찾는 과정이 아니라 질문을 더 많이 만드는 과정
사용자가 “좋다/싫다”라고 말하는 것보다 왜 그런 반응을 보이는지 파악하는 게 중요
방어적으로 설명하지 말고, 조용히 관찰하거나, 질문만 던지는 태도 유지
✅ 테스트 후 해야 할 일
관찰 내용, 피드백을 기록하고, 패턴을 분석하기
필요하면 다시 공감-정의-아이디어 단계로 돌아가기
테스트 결과를 바탕으로 프로토타입을 개선하거나 전면 수정하기

디자인 사고의 특성(1) - 까다로운 문제에 효과적
디자인 사고가 다루는 문제의 스펙트럼
잘 정의된 문제(Well-defined problems): 명확한 문제 정의와 해결책
비구조화된 문제(Ill-defined problems): 불명확한 조건과 다양한 해결 경로
까다로운 문제(Wicked problems):
명확한 공식화가 없음
참/거짓으로 구분되는 해결책이 없음
다양한 관점 간 큰 불일치 존재
이해관계자마다 문제 정의가 다름
시도한 해결책이 다시 문제를 변화시킴
초까다로운 문제(Super wicked problems): 글로벌 기후 변화 등 복잡성이 더욱 증가한 문제

디자인 사고의 특성(2) - 문제 프레이밍
디자인 사고에서의 문제 재해석
디자이너는 주어진 문제를 그대로 받아들이지 않음
문제와 그 맥락을 탐색하고 재해석하거나 재구성함
이러한 '문제 프레이밍'을 통해 해결책으로 가는 길을 발견
문제 프레이밍의 특징:
동일한 문제도 여러 가지 방식으로 프레이밍 가능
프레이밍 방식이 가능한 해결책의 범위를 결정함
프레이밍은 문제의 범위를 확장하거나 축소할 수 있음
효과적인 프레이밍은 혁신적 해결책의 시작점

디자인 사고의 특성(3) - 해결책 중심 사고
과학자 vs 디자이너의 접근 차이:
과학자: 문제 중심 전략(Problem-focused strategies)
디자이너: 해결책 중심 전략(Solution-focused strategies)
해결책 중심 사고의 특징:
해결책 가설을 통해 문제에 대한 이해를 발전시킴
"문제를 분석하여 해결책을 찾는다" 대신 "해결책을 제안하여 문제를 이해한다"
해결책을 탐색하는 과정에서 문제의 본질이 더 명확해짐
가능한 해결책을 통해 문제 공간을 효과적으로 탐색

디자인 사고의 특성(4) - 귀추적 추론
연역적(Deductive) 추론: 일반 원칙에서 특수한 결론 도출
"모든 사람은 죽는다. 소크라테스는 사람이다. 따라서 소크라테스는 죽는다."
귀납적(Inductive) 추론: 관찰된 사례에서 일반화
"본 까마귀가 모두 검은색이다. 따라서 모든 까마귀는 검다."
귀추적(Abductive) 추론: 최선의 설명을 위한 추론
"길이 젖어있다. 비가 왔다면 이를 설명할 수 있다. 아마도 비가 왔을 것이다."
디자인에서의 혁신적 귀추(Innovative abduction):
가능한 해결책("무엇")과 그 작동 원리("어떻게")를 동시에 창조
새로운 디자인 제안을 위한 핵심 사고 방식

디자인 사고의 특성(5) - 문제와 해결책이 동시에(공진화)
디자인 과정의 역동성:
디자이너의 관심은 문제 맥락과 해결책 아이디어 사이를 오가며 진행
문제와 해결책이 함께 발전하는 '공진화' 과정
공진화 과정의 특징:
새로운 해결책 아이디어는 문제 맥락에 대한 더 깊은/대안적 이해로 이어짐
이 새로운 이해는 다시 더 많은 해결책 아이디어를 촉발
문제와 해결책이 상호의존적으로 발전
선형적 접근("문제 정의 → 해결책 개발")이 아닌 순환적, 반복적 과정

디자인 사고의 특성(6) - 표현과 모델링
디자이너의 커뮤니케이션 방식:
추상적 요구사항을 구체적 객체로 번역하는 시각적/객체적 언어 사용
이러한 '언어'는 전통적인 스케치와 도면부터 컴퓨터 모델, 물리적 프로토타입까지 다양함
표현과 모델의 역할:
잠정적 해결책 개념의 생성과 탐색
발전 중인 개념에 대해 알아야 할 것 파악
표현 내에서 드러나는 새로운 특성과 속성 인식
복잡한 아이디어를 구체화하고 팀원 간 커뮤니케이션 촉진

디자인 사고가 PM의 문제해결을 구원한다
프로덕트의 존재 이유는 고객 문제의 해결에 있다
이를 해결하는데 최적화된 도구 - 디자인 사고
현대의 많은 프로덕트 성장 전략이 디자인 사고에서 출발했다

더 이상 "한 번에 정답을 만들겠다"는 압박에서 벗어나
"작게 시도하고, 빠르게 실패하고, 학습하며 나아가는" 방식으로 문제를 해결

Break Time

이 과정을 효과적으로 진행하면 얼마만에 끝낼 수 있을가?

구글 벤처스가 개발한 가장 빠른 서비스 런칭 프로그램
지메일
크롬
페이스북
우버
블루보틀
슬랙
에어비앤비
…

디자인 스프린트란
IDEA → LAUNCH → BUILD → LEARN
디자인 스프린트는 사용자와 함께 디자인, 프로토타입, 테스트를 통해 중요한 비즈니스 질문에 답을 찾는 프레임워크입니다.


🔄 발산적 & 수렴적 사고를 지원하는 프레임워크
이해하기 → 정의하기 → 스케치하기 → 결정하기 → 프로토타입 만들기 → 검증하기

스프린트 계획표
🔹 Day 1
환영 인사
이해하기
정의하기
스케치하기
🔹 Day 2
결정하기
스토리보드 만들기
프로토타입 제작
🔹 Day 3
프로토타입 완성
사용자 검증

🗓 Day 1 일정 (스프린트 계획)
09:30 환영 & 자기소개
→ 프로세스 개요
→ 스프린트 챌린지 설명
→ 아이스 브레이커
10:00 이해하기: 라이트닝 토크
11:30 “어떻게 하면 좋을까(HMW)” 작성
→ 어피니티 매핑
12:00 점심시간
13:00 경험 맵 만들기
14:00 성공 정의 및 목표 설정
14:30 부트업: 노트 정리
14:40 크레이지 8 스케치
→ 발표 & 투표
15:10 솔루션 스케치
17:00 1일차 마무리 공유

정해야 할 것
🎯 챌린지 진술문 (Challenge Statement):
❓우리는 왜 오늘 여기에 모였을까요?
예) 

📦 산출물 (Deliverables): [목표] + [사용자 유형] + [플랫폼] + [시간 프레임]
예) 목표: 스트레스 없는 구매 경험
사용자 유형: 20~30대 모바일 사용자
플랫폼: iOS 앱
시간 프레임: 향후 3개월

🧠 이해하기 (Understand) - HMW
❓ HMW (How Might We?) 메모법
라이트닝 토크를 들으며 포스트잇에 아이디어를 기록해요.
How: 기회가 있다고 가정합니다
Might: 다양한 가능성을 열어둡니다
We: 함께 해결한다는 뜻입니다
✍️ HMW 작성 요령
두꺼운 검정 펜으로 씁니다
간결하게 씁니다
한 포스트잇당 한 가지 아이디어
너무 넓지도, 너무 좁지도 않게
안 적으면 투표할 수 없습니다!

⚡ 라이트닝 토크 주제 (각 10분)
프로젝트 비전 / 비즈니스 목표
사용자 관점 / 사용자 조사 결과
현재 제품 분석 / 디자인 변화 과정
경쟁사 분석
기술 고려사항 및 기회

모든 주제를 다 다루지 않아도 되며, 문제 공간을 풍부하게 이해하는 데 도움이 되는 범위 내에서 선택하세요.

주제별 질문(1)
📋 프로젝트 비전 / 비즈니스 목표를 위한 질문
내년 이 제품은 어디에 있어야 하나요?
5년 뒤에는 어떤 모습이 되어야 하나요?
극복해야 할 주요 과제는 무엇인가요?
무엇이 밤에 잠 못 들게 하나요?
💰 비즈니스 기회는 무엇인가요?
수익 증대?
사용자 참여 시간 또는 깊이 향상?
재방문률 및 충성도 향상?
경쟁사와 차별화?
제품/서비스 품질 향상?
새로운 시장/사용자 확보?
그 외 이해관계자가 말하는 기회?

주제별 질문(2)
🧍 사용자에 대해 알고 있는 것은?
서로 다른 행동 유형이 있나요?
페르소나나 패턴으로 묘사하나요?
다양한 사용자 여정이 있나요?
🌐 사용자 경험 흐름 (end-to-end)
사용자는 어떻게 들어오나요? (진입점)
이상적인 흐름은 어떤 모습인가요?
주요 터치포인트는 무엇인가요?
단일 세션인가요? 복수 세션인가요?
어떻게 종료되며, 이후 어떻게 연결되나요?

주제별 질문(3)
🧪 기존 제품은 어떤 모습인가요?
지금까지 어떻게 발전했나요?
잘 작동한 시도는?
잘 안 된 시도는?
(스크린샷 포함 가능)
🔍 경쟁사 분석
시장 조사 내용이 있나요?
경쟁 지형은 어떤가요?
유사하거나 참조할만한 제품은?
타 산업에서 배울 수 있는 점은?
경쟁사 강점/약점은?
SWOT 분석 가능?

주제별 질문(4)
💻 기술적 고려사항
웹, 모바일, 임베디드 중 어디에 해당하나요?
데이터는 어디서 오고 어떻게 쓰이나요?
개인정보 보호, 접근성은 어떻게 처리하나요?
어떤 디바이스에서 쓰이나요?
외부 파트너가 개입되나요?
내부에서 협업해야 할 영역은?

주제별 질문(4)
❌ 너무 넓거나 좁은 예시
❌ 너무 넓음: “어떻게 하면 사람들을 행복하게 만들 수 있을까?”
❌ 너무 좁음: “구매 버튼을 파란색으로 만들 수 있을까?”
✅ 적절함: “위치 정보를 사용해 관련 결과를 보여줄 수 있을까?”

🍱 점심시간 후: HMW 공유
각자 작성한 HMW 메모를 5분간 공유
없다면, 잠시 시간 내어 작성
이후 다음 단계로!

🗂 Affinity Mapping (연관 아이디어 묶기)
10분간 HMW 메모들을 주제별로 묶기
초기 분류가 명확하지 않아도 OK
겹치거나 비슷한 내용을 기준으로 시작
나중에 더 나은 분류로 수정 가능
목표: 유용한 카테고리 맵 만들기

🗳 Voting (투표하기)
각 팀원은 점 3개를 받습니다
자기 메모에 투표해도 됩니다
같은 메모에 여러 점을 찍어도 됩니다
투표 수가 많은 메모가 우선 검토 대상이 됩니다
이 단계는 방향을 정하는 것이 아니라, 영향력 있는 아이디어를 걸러내는 과정입니다

🗺 사용자 여정 그리기 (Experience Map)
사용자의 첫 시작 지점부터 시작
단계별로 사용자의 행동을 나열
각 단계에 대한 설명을 덧붙이세요
문제점(페인 포인트)도 함께 표시하세요

🎯 목표 및 성공 기준 설정
HMW 논의에 기반해 아래를 결정하세요:
어떤 사용자에 초점을 맞출 것인가?
어떤 순간 또는 어떤 문제점을 개선하고 싶은가?
📏 성공의 기준을 정의하세요
성공은 어떤 모습인가요?
어떻게 측정할 수 있나요?
새로운 측정 도구가 필요할까요?

❤️ HEART 프레임워크 (목표를 잡을 때 참고 가능)
Happiness (만족도): 사용자 태도, 설문 기반
Engagement (참여도): 사용 빈도, 깊이, 강도
Adoption (채택률): 신규 사용자 수
Retention (재사용률): 돌아오는 사용자 비율
Task completion (업무 달성도): 효율성, 정확도, 오류율

🔍 유사 문제 영역의 사례 찾기
3분간 각자 다른 분야에서 유사한 문제 해결 사례 찾기
기존 산업 외부에서 영감을 얻으세요
예시를 찾아서 공유하세요

✍️ Boot Up (부트업: 아이디어 정리) – 10분
화이트보드 / 벽에 있는 정보 다시 살펴보기
HMW 메모 다시 읽기
정한 목표와 성공 기준도 확인
스케치하고 싶은 아이디어 목록을 써보세요→ “이건 그려보고 싶다!” 싶은 것들

🔄 Crazy 8’s (크레이지 8’s) – 8분
종이를 8칸으로 접어주세요
각 칸에 하나의 아이디어를 스케치하세요
스토리보드가 아니라, 아이디어의 스냅샷
수량이 우선! (예쁘게 안 그려도 돼요)
첫 아이디어에만 집착하지 말고→ 8가지 다른 아이디어에 도전!

🗳 공유 & 투표 – 10분
각자 3분 동안 자기 크레이지 8 아이디어 발표
발표 후 각자 점 3개로 투표
사람들이 좋아하는 아이디어를 확인하는 단계

🎯 솔루션 스케치 (Solution Sketch) – 10분
각자 자신의 최고 아이디어 하나를 선택
여러 상태(단계)를 보여주는 스케치를 만들어 보세요
설명을 위한 단어도 포함해 주세요 (보지 않아도 이해되게)
눈에 띄는 제목도 붙이기!

Day 1 종료

🗓 Day 2 일정표
09:30 Day 1 요약 및 회고
09:40 솔루션 스케치 리뷰
→ 관련된 가정(assumptions)과 스프린트 질문(sprint questions) 도출
10:20 프로토타입으로 만들 아이디어 선택
→ 스토리보드 작성 시작
→ 역할 분배
12:00 점심시간
13:00 프로토타입 제작 시작
14:00 사용자 테스트용 스크립트 작성
→ 시나리오 흐름과 맞추기
17:00 2일차 마무리 점검

🖼 솔루션 스케치 발표 – 1인당 3분
아이디어 스케치를 벽에 걸고
마치 전시회처럼 둘러보며
각자 3분간 자기 아이디어를 설명

🤔 가정과 스프린트 질문 정리
내 아이디어에 숨겨진 가정은 무엇인가요?
사용자 테스트를 통해 무엇을 알고 싶은가요?
답을 얻고 싶은 질문들을 나열하세요
너무 많다면 우선순위 상위 3개를 골라요

⚔ Rumble or All-in-One?
선택지 1: 여러 아이디어 중 하나로 합치기 (통합 솔루션)
선택지 2: Rumble – 두 가지 솔루션을 동시에 실험
스프린트는 경쟁 아이디어를 실험하기에 완벽한 환경!

🎬 스토리보드 만들기
우리가 만들려는 것을 모두가 공감할 수 있게 시각화
구체적인 플로우와 구성 요소 작성
4~5개의 핵심 순간으로 압축
주의:
소프트웨어 밖에서 시작하기
감정을 중심으로 생각하기
프로토타입 제작에 충분한 구체성 포함

🧪 프로토타입 제작 시작
이번 스프린트는 문제 해결을 위한 가설 실험이에요
프로토타입은 그 가설이 얼마나 좋은지 확인할 수 있는 수단
사용자에게 테스트할 때, 현실적으로 느껴지도록 만들어야 해요

🧑‍🤝‍🧑 역할 분담하기
Mocks 제작: 담당자
User Flow 설계: 담당자
프로토타입 구축: 담당자
테스트 발표 준비: 담당자

Day 2 종료

🗓 Day 3 일정표
09:30 프로토타입 마무리, 리뷰 및 점검
12:00 점심시간
13:00 사용자 세션 1 & 2
13:45 디브리핑(회고)
14:00 사용자 세션 3 & 4
14:45 디브리핑
15:00 사용자 세션 5 & 6
15:45 디브리핑
16:00 최종 공유
17:00 🎉 축하합니다! 스프린트 완료!

🧪 프로토타입 검증 준비
오늘 여러분은 아래를 가지고 있어야 해요:
스토리보드 완성본
핵심 순간 5개 식별
그 순간들을 보여주는 하이 피델리티 목업
빠르게 구현한 테스트용 프로토타입

🔍 사용자 테스트 – 45분 간격으로 진행
우리가 만든 아이디어를 진짜 사용자에게 검증
테스트 대상자는 실제 사용 가능성이 높은 사람이어야 해요
사전에 컨퍼런스룸이나 유저 테스트실 예약 필수

📝 화이트보드 노트 테이킹
사용자 행동을 따라가며 메모합니다
(+) 긍정적 반응
(–) 문제점 또는 실패
비어 있음: 행동 없음

✅ 디자인 스프린트 마무리
📌 복기 & 공유
무슨 일이 있었는지 요약
배운 점은?
다음 단계는?

Day 3 종료

디자인 스프린트를 실무에 적용하려면?
실제 초기 제품 아이디어를 내는 데 사용하면 좋다
3일만에 끝낼 수 있기 때문에 
다만 프레임워크 프로세스가 타이트하며 전문성이 필요
초기 시도에서 시행착오가 많을 수 있다
챌린지의 범위를 잘못 정하는 경우
고객 여정을 잘못 설계한 경우
아이디어 스케치를 어색해 하는 경우
프로토타입을 만드는데 너무 많은 리소스를 쓰는 경우
사용자 검증 과정에서 놓치는 문제들이 있는 경우

디자인 스프린트의 장점을 살펴보자
디자인 사고를 활용해 문제를 해결하는 것의 최적화의 정점
발산, 수렴을 적절하게 활용해 어떻게 고객 문제를 해결할 것인가에 대한 프로세스를 이해하기 최적의 도구 중 하나
주어진 문제를 해결하는 최적의 솔루션을 찾기 위해 디자인 스프린트의 장점을 잘 살펴보고 이를 활용해 보자

제품의 지속적인 성장 속도 = 스프린트의 속도
제품은 얼마나 빨리 고객 문제를 해결하느냐에 따라 성장한다
초기 제품 → 고객 반응 → 개선
이 루프가 빠를수록 제품은 살아남고, 제품이 지속적으로 진화, 성장



제품의 성장 속도 = 문제 해결 실험 속도 = 스프린트 속도

질의응답 & 토론

사전 질문(15분)
고객의 문제를 해결하는 ‘최적’의 솔루션을 찾을 수 있는 방법은 무엇일까요? 그 방법이 최적을 솔루션을 찾을 수 있다고 생각하는 이유는 무엇인가요?

실제 제품 개발 과정에서 새로운 솔루션을 적용하고 검증하는데 필요한 최소한의 시간은 대략 어느정도 일까요? 그렇게 생각한 이유는 무엇인가요?


수고하셨습니다
