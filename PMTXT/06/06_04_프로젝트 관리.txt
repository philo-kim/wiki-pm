프로젝트 관리(4)
MVP 정의와 PRD 작성

사전 질문(15분)
MVP 개념을 사용해 기능을 최소한으로 구현하는 것이 효과적인 이유가 무엇일까요? 최소한의 기준은 어떻게 설정해야 할까요?

제품팀이 올바른 MVP를 만들 수 있도록 하려면, 어떤 내용을 중심으로 충분한 의사소통이 이뤄져야 할까요?

사전 질문 토론
✅ 1. MVP 개념을 사용해 기능을 최소한으로 구현하는 것이 효과적인 이유는 무엇이며, 최소한의 기준은 어떻게 설정해야 할까요?
MVP는 핵심 가설을 빠르게 검증하고, 시장 반응을 조기에 파악해 리스크와 비용을 최소화하는 전략이다.
실패의 원인을 명확히 파악하고, 빠르게 개선하며 반복할 수 있게 해준다.
최소한의 기준은 고객 문제 해결에 꼭 필요한 기능, 가설 검증에 필요한 요소를 중심으로 설정해야 한다.
“딱 이것만으로도 고객이 써볼 이유가 있나?”에 답할 수 있어야 한다.
✅ 2. 제품팀이 올바른 MVP를 만들기 위해 어떤 내용을 중심으로 충분한 의사소통이 이뤄져야 할까요?
MVP가 무엇을 검증하기 위한 실험인지, 고객에게 어떤 순간을 줄 것인지에 대한 공통된 이해가 중요하다.
제품의 핵심 가치, 해결할 문제, 목표 사용자와 그들의 맥락에 대한 인식이 공유돼야 한다.
기능의 우선순위, 리소스 한계, 피드백 루프 등에 대해 투명한 협의가 필요하다.
결국 팀 모두가 “왜 이걸 만들고 있는가”에 대해 같은 방향을 바라보는 것이 핵심이다.

Case: 일이 점점 커지는 문제
워터폴 방식으로 오랫동안 일 해온 조직에서 처음으로 린(Lean)하게 제품을 출시하는 시도를 수행
초기 고객의 핵심 문제를 발견해 이를 검증하는 제품을 만들기 위한 초기 기획을 마침
기획 문서를 본 의사결정권자는 이 기능으로 되겠냐며 더 많은 기능을 제안
해당 제안을 승인 받기 위해 상위 기획에 대한 문서를 추가로 만들어야 할 필요성
개발팀과 협업을 하기 위해 기능의 범위를 결정하는 데 있어서 많은 제약사항이 등장
이 제약사항을 조율하기 위해 기능을 축소, 조정하려고 했지만 한번 정해진 기획문서를 변경하는 것을 꺼려함
1달만에 첫 제품을 만드는 것을 목표로 했지만 4개월이 걸려 첫 제품을 만들게 됨

제품 성공을 위한 빠른 실행의 어려움
시도와 실패가 중요하다고 하지만 빠른 실행의 장애물은 많다
실패 보다는 성공을 먼저 생각하는 것이 인간의 본능
성공을 위해서 더 많은 기능이 필요하지 않을까 하는 생각이 자리잡는다

아이디어가 실패하는 이유를 극복하기 위해 필요한 것은?
빠르게 시도하고 학습하기 위한 제품 출시 전략은?
이 전략을 제대로 실행하기 위해 제품팀과 함께 공유해야 하는 것은?

왜 새로운 제품 아이디어가 실패하는가?
"훌륭한 제품은 우연히 만들어지지 않는다"
올바른 기회를 찾고 검증하는 것
기회에서 실행 가능한 계획으로의 전환
효과적인 커뮤니케이션의 중요성
기술적인 문제보다 더 근본적인 원인:
고객이 제품을 원하지 않거나 필요로 하지 않음
제품/시장 적합성(Product/Market Fit) 달성 실패
사용자 니즈와 기대에 부합하지 못함

왜 새로운 제품 아이디어가 실패하는가?
기술적 한계보다 '시장'이 더 큰 장벽
고객이 원하지 않거나 필요로 하지 않는 제품 개발
제품-시장 적합성(Product-Market Fit) 실패
제품 출시까지 오랜 시간이 걸려 시장 상황 변화
너무 많은 기능으로 사용자 혼란 초래
제품 가치가 명확히 전달되지 않아 구매로 연결 실패

Minimum
Viable
Product
고객의 반응을 검증할 수 있을 정도로 최소한의 기능만 갖춘 제품

MVP의 핵심 개념
최소 = 가장 중요한 가치를 전달하는 최소한의 기능
최소 ≠ 열악함
잘 설계되고 테스트된 제품
고객에게 실질적 가치 제공
구매와 사용을 원하게 만드는 제품
고객의 주요 문제 해결 솔루션
MVP의 장점:
불필요한 기능 구축 방지
복잡성으로 인한 사용자 이탈 방지
실제 고객 피드백 기반 반복 가능

MVP와 린(Lean) 접근법
이상적인 세계:
MVP 출시
실제 고객 사용 관찰
피드백 수집
다음 단계 결정
반복
현실:
종종 더 많은 기능이 포함된 출시 필요
내부 MVP 테스트로 우선순위 결정 가능

MVP의 이점과 위험성
이점:
빠른 시장 검증 및 학습
자원의 효율적 사용
방향성 조기 수정 가능
핵심 가치에 집중
위험성:
너무 '최소'에 집중하여 가치 전달 실패
품질과 최소 사이의 균형 상실
내부 이해관계자의 기대치 관리 어려움

효과적인 MVP 범위 설정
왜 범위 설정이 어려운가?
제품에 대한 열정으로 과도한 기능 포함 유혹
다양한 이해관계자의 요구사항 충돌
"이것만 더" 신드롬과 범위 확장
완벽한 제품 출시에 대한 압박
잘못된 범위 설정의 결과:
출시 지연으로 인한 기회 상실
개발 리소스 낭비
핵심 가치 희석으로 인한 사용자 혼란
검증 지연으로 인한 잘못된 방향 지속
"완벽한 MVP는 없다. 불편함을 느낄 정도로 기능을 줄여야 진정한 MVP다."

MVP 정의 방법
1. 핵심 문제와 가치 명확화
해결하려는 한 가지 핵심 문제에 집중
"이 제품이 없으면 고객은 어떤 불편을 겪는가?"
"이 제품의 핵심 가치 제안은 무엇인가?"
2. 타겟 사용자 구체화
초기에는 모든 사용자를 만족시키려 하지 말 것
가장 문제를 심각하게 겪는 사용자층 선정
사용자 페르소나로 구체화하여 공감 형성

MVP 정의 방법
3. 기능의 우선순위화 기법
카노 모델(Kano Model) 활용:
기본 기능(Must-have): 없으면 불만, 있어도 만족도 증가 없음
성능 기능(Performance): 제공 수준에 비례해 만족도 증가
매력 기능(Delighter): 없어도 불만 없음, 있으면 큰 만족
무관심 기능(Indifferent): 있어도 없어도 만족도 영향 없음
MoSCoW 기법 적용:
Must have: 반드시 있어야 하는 기능
Should have: 있어야 하지만 MVP에서는 제외 가능
Could have: 있으면 좋지만 우선순위 낮음
Won't have: 이번 릴리스에서는 제외

다양한 MVP 유형과 특징
사전 주문 MVP (Pre-order MVP)
컨시어지 MVP (Concierge MVP)
오즈의 마법사 MVP (Wizard of Oz MVP)
가짜 문 MVP (Fake Door MVP)
싱글 피처 MVP (Single Feature MVP)
피벗 MVP (Pivot MVP)
페이퍼 MVP (Paper MVP)

1. 사전 주문 MVP (Pre-order MVP)
“실제 제품 개발 전에 마케팅 사이트, 랜딩 페이지 등을 통해 관심과 주문을 받는 방식”
장점: 매우 낮은 개발 비용, 시장 수요를 직접적으로 검증 가능, 초기 사용자 확보와 피드백 수집 동시 진행
단점: 신뢰도 구축 어려움, 실제 제품 경험 제공 불가, 브랜드 평판 리스크
적합한 상황:
제품 개발에 많은 리소스가 필요한 경우
시장 수요에 대한 불확실성이 높은 경우
물리적 제품이나 복잡한 서비스
사례: Dropbox의 3분 데모 비디오, Kickstarter/와디즈 캠페인, 사전 가격 정책 페이지

2. 컨시어지 MVP (Concierge MVP)
“자동화된 제품 없이 사람이 직접 서비스를 제공하며 프로세스를 테스트하는 방식”
장점: 기술적 개발 없이 바로 시작 가능, 사용자 니즈에 대한 깊은 이해 획득, 실시간으로 프로세스 조정 가능
단점: 확장성 제한, 리소스 집약적, 일관된 서비스 품질 유지 어려움
적합한 상황:
복잡한 사용자 니즈 이해가 필요한 경우
자동화할 정확한 프로세스를 탐색 중일 때
소수의 고가치 고객을 대상으로 할 때
사례: 요리 추천 서비스의 초기 버전, 많은 B2B SaaS 제품의 초기 단계

3. 오즈의 마법사 MVP (Wizard of Oz MVP)
“사용자에게는 자동화된 시스템처럼 보이지만, 실제로는 백엔드에서 사람이 수동으로 처리하는 방식”
장점: 사용자에게 자동화된 경험 제공, 기술 개발 비용 없이 검증 가능, 실제 사용 데이터 수집
단점: 운영 비용 높음, 확장성 한계, 처리 시간 지연 가능성
적합한 상황:
복잡한 알고리즘이나 AI 기능 테스트
기술적 구현이 어렵거나 비용이 높은 경우
사용자 경험과 기술적 실현 가능성 사이의 균형 필요시
사례: 질문 대답 서비스, 패션 서비스의 스타일 추천

4. 가짜 문 MVP (Fake Door MVP)
“아직 존재하지 않는 기능이나 제품에 대한 UI만 구현하여 사용자 관심도를 측정하는 방식”
장점: 매우 적은 개발 비용, 빠른 시장 검증, 관심도 정량적 측정 가능
단점: 사용자 실망/불만 가능성, 실제 사용성 테스트 불가, 브랜드 신뢰도 훼손 위험
적합한 상황:
다양한 기능 아이디어 중 우선순위 결정 필요시
기존 제품/서비스에 새로운 기능 추가 고려시
개발 리소스 투입 전 시장 관심도 확인 필요시
사례: Dropbox 초기 가입 페이지, 많은 SaaS 제품의 "Coming Soon" 기능

5. 싱글 피처 MVP (Single Feature MVP)
“제품의 핵심 가치를 전달하는 단 하나의 주요 기능만 개발하는 방식”
장점: 개발 시간 및 비용 최소화, 핵심 가치 제안에 집중, 명확한 사용자 피드백 수집
단점: 제한된 사용자 경험, 경쟁력 부족 가능성, 실제 제품과의 격차
적합한 상황:
핵심 차별화 요소가 명확한 경우
개발 리소스가 제한적인 경우
빠른 시장 진입이 중요한 경우
사례: Instagram의 초기 버전(사진 필터 중심), 초기 WhatsApp(메시징 기능만 집중)

6. 피벗 MVP (Pivot MVP)
“기존 제품을 새로운 방향으로 전환하기 위한 최소 기능 세트”
장점: 기존 자산과 사용자 활용, 낮은 진입 장벽, 비교 데이터 확보 용이
단점: 기존 사용자 혼란 가능성, 브랜드 아이덴티티 혼선, 기술적 부채 발생 가능
적합한 상황:
기존 제품이 시장에서 성공하지 못한 경우
새로운 시장 기회 발견 시
비즈니스 모델 변경 필요 시
사례: Slack(게임 스튜디오에서 협업 도구로), Instagram(위치 기반 앱에서 사진 공유 앱으로), Pinterest(쇼핑 앱에서 이미지 큐레이션 플랫폼으로)

7. 페이퍼 MVP (Paper MVP)
“실제 개발 전에 종이 프로토타입이나 스토리보드로 제품 경험을 테스트”
장점: 개발 비용 없음, 빠른 반복 및 수정 가능, 초기 UX 문제 발견 용이
단점: 실제 제품 경험과 차이, 기술적 제약 파악 어려움, 제한된 사용자 피드백
적합한 상황:
초기 제품 컨셉 검증 단계
사용자 인터페이스 설계 초기 단계
다양한 사용자 흐름 검토 필요 시
사례: 디자인 스프린트, 모바일 앱의 초기 설계 단계, 복잡한 사용자 인터랙션 설계 시

기회 검증에서 제품 개발로의 전환
기회 검증을 통해 시장의 필요성은 확인했지만...
구체적인 제품으로 만드는 과정에서 많은 위험이 존재
아이디어 → 실행 가능한 것으로 전환하는 방법이 필요
이 과정에서 PM으로서 커뮤니케이션의 역할 증가

실제로 제품팀이 MVP를 만들기 위해어떤 자료가 준비되어야 할까?

PRD(Product Requirements Document)란?
제품이나 기능의 목적, 범위, 요구사항을 정의하는 문서
팀 전체가 제품 비전을 공유하고 같은 방향으로 나아가게 하는 도구
명확한 의사결정과 우선순위 설정의 기준점
PRD의 핵심 가치:
단순한 기능 명세서가 아닌 의사결정 도구
'무엇을'보다 '왜'에 집중
문제 해결 중심의 접근법
팀의 방향성을 유지하는 나침반

PRD가 없거나 부실할 때 발생하는 문제
팀원 간 소통 오류와 엇갈린 해석
중요 요구사항 누락
개발 후 핵심적 문제 발견
불필요한 기능 개발로 인한 자원 낭비
반복되는 회의와 논쟁으로 인한 시간 낭비
제품 방향성 일관성 상실

PRD의 두 가지 관점
전통적 PRD (폭포수 모델):
20페이지 이상의 방대하고 상세한 명세서
프로젝트 시작 전 완전히 작성 완료
한번 승인되면 변경이 어려움
모든 세부 요구사항 사전 정의
린 PRD (현대적 접근법):
살아있는 문서(Living Document)로 지속적 업데이트
핵심 가치와 목표에 집중한 간결한 문서
피드백과 학습에 따라 진화하는 유연한 구조
기능보다 문제 해결과 가치 전달에 초점

효과적인 PRD의 특징
명확한 문제 정의와 해결책 제시
측정 가능한 성공 기준 포함
사용자 중심적 접근법 적용
핵심에 집중하고 불필요한 세부사항 배제
모든 팀원이 이해할 수 있는 명확한 언어 사용
기능 목록이 아닌 가치와 목표 중심 구성
피해야 할 함정:
지나치게 상세하거나 길이가 불필요하게 긴 문서
모호하고 측정 불가능한 목표
기술적 구현 방법 지시 (해결책 대신 문제에 집중)
지나친 전문 용어와 이해하기 어려운 표현


PRD의 주요 구성요소
제목 및 변경 이력
배경 및 컨텍스트
목표 및 개요
성공 지표
페르소나
사용자 시나리오/스토리
요구사항/기능 (포함/제외)
디자인 고려사항
시스템 요구사항
가정, 제약사항 및 의존성
릴리즈 및 실험 계획

PRD의 구조는 목적과 조직 문화에 맞게자유롭게 조정하여 사용할 수 있다

Break Time

1. 제목 및 변경 이력
제목:
프로젝트의 고유 식별 이름
간결하고 명확한 명명
필요시 버전 번호 포함
변경 이력:
주요 변경사항, 날짜, 담당자 기록
문서의 진화 과정 추적
모든 이해관계자가 최신 상태 파악 가능

1. 제목 및 변경 이력 예시

제목: 사용자 활동 기반 개인화 추천 시스템 (Personalized Recommendation v1.0)
변경 이력: 
- 2025-02-05: 김제품 - 초기 개념 및 목표 정의
- 2025-02-12: 박데이터 - 데이터 요구사항 및 알고리즘 접근법 추가
- 2025-02-18: 김제품 - 사용자 인터뷰 결과 반영 및 성공 지표 조정
- 2025-02-25: 이개발 - 기술적 제약사항 업데이트 및 MVP 범위 조정

2. 배경 및 컨텍스트
"왜 이 기능을 개발해야 하는가?"
포함해야 할 요소:
비즈니스 목표와의 연계
고객 피드백 및 데이터 인사이트
경쟁사 분석 및 시장 동향
기술적 필요성과 배경
효과적인 작성법:
단순히 "이 기능이 필요하다"가 아닌 근본적 이유 제시
실제 데이터와 사용자 피드백 활용
비즈니스, 사용자, 기술적 관점 통합
문제의 규모와 영향력 명확히 설명

2. 배경 및 컨텍스트 예시

현재 상황: 당사 콘텐츠 플랫폼의 사용자 참여도 데이터를 분석한 결과, 사용자의 67%가 첫 방문 후 20분 이내에 플랫폼을 떠나고 있으며, 재방문율은 업계 평균(42%)보다 낮은 28%에 머물고 있습니다. 사용자 인터뷰(n=24)에서는 "관심 있는 콘텐츠를 찾기 어렵다"는 의견이 상위 3개 불만 사항 중 하나로 확인되었습니다.
시장 상황: 경쟁사 A와 B는 이미 머신러닝 기반 추천 시스템을 도입하여 사용자당 평균 체류 시간을 35% 증가시켰고, 콘텐츠 소비량을 50% 이상 높였습니다. 업계 보고서에 따르면 개인화 콘텐츠 추천은 2025년까지 핵심 차별화 요소로 자리잡을 것으로 예상됩니다.
기회: 당사가 보유한 풍부한 사용자 행동 데이터(지난 3년간 5백만 사용자의 3천만 상호작용 기록)와 콘텐츠 메타데이터를 활용하여 개인화된 추천 시스템을 구축하면, 사용자 참여도와 콘텐츠 발견성을 크게 향상시킬 수 있는 기회가 있습니다.

3. 목표 및 개요
개요:
프로젝트의 핵심 내용 간결하게 설명
모든 이해관계자가 이해할 수 있는 명확한 표현
가치 제안과 차별화 요소 강조
목표 설정:
SMART 원칙(Specific, Measurable, Achievable, Relevant, Time-bound)
구체적이고 측정 가능한 목표
비즈니스 성과와 사용자 경험 개선 연계

3. 목표 및 개요 예시

개요:
사용자 활동 기반 개인화 추천 시스템은 각 사용자의 과거 행동과 관심사를 분석하여 최적화된 콘텐츠를 추천하는 기능입니다. 사용자의 콘텐츠 발견 경험을 개선하고 플랫폼 참여도를 높이는 것이 목적입니다.
목표:
평균 세션 시간 28% 증가 (12분 → 15.5분)
일일 콘텐츠 소비량 35% 증가 (4.2개 → 5.7개)
30일 재방문율 50% 향상 (28% → 42%)

4. 성공 지표
"이 기능이 성공했는지 어떻게 판단할 것인가?"
효과적인 성공 지표의 특징:
구체적이고 측정 가능한 수치 목표
기존 데이터와의 비교를 통한 개선 정도 명시
비즈니스 목표 및 사용자 경험과 직접 연결
측정 방법 및 주기 명확화
작성 시 고려사항:
"사용자 경험 개선"과 같은 모호한 표현 대신 구체적 지표 사용
핵심 지표에 집중 (3-5개 권장)
선행 지표와 후행 지표 균형 유지
책임자 및 측정 주기 지정

4. 성공 지표 예시

핵심 성공 지표:
추천 클릭률(CTR): 목표 12% (업계 평균 8%)
측정: 추천 노출 대비 클릭 비율, 일간 트래킹
추천 콘텐츠 완료율: 목표 65%
측정: 추천 콘텐츠 소비 완료 비율
사용자당 수익(ARPU) 변화: 목표 22% 증가
측정: 추천 시스템 사용자 vs 비사용자 A/B 테스트

5. 페르소나
페르소나의 가치:
실제 사용자 프로필을 통한 공감 형성
팀의 사용자 이해도 향상
기능 설계와 우선순위 결정의 기준점
효과적인 페르소나 작성법:
실제 사용자 데이터와 인터뷰 기반
인구통계학적 정보보다 목표와 행동 패턴에 집중
구체적이지만 대표성 있는 특성 부여
주요 타겟과 보조 페르소나 구분

5. 페르소나 예시

콘텐츠 탐험가 A씨 (28세, 마케팅 전문가)
특성:
바쁜 전문직, 하루 평균 1시간 콘텐츠 소비
주로 모바일 앱 사용 (85%), 짧은 세션(5-10분)
최신 트렌드와 전문 지식 콘텐츠 선호
목표:
관련성 높은 콘텐츠를 효율적으로 발견
직업적 성장을 위한 인사이트 수집
좌절 요소:
"항상 같은 주제만 추천받는 느낌이에요"
"새로운 분야 탐색이 어려워요"

6. 사용자 시나리오
사용자 시나리오의 역할:
기능이 실제 사용되는 맥락 이해
팀 전체의 고객 공감 형성
제품 목적과 가치의 구체화
디자인 및 개발 방향 제시
효과적인 시나리오 작성법:
특정 페르소나의 관점에서 작성
실제적인 상황과 문제 묘사
제품이 어떻게 문제를 해결하는지 보여줌
설정→발단→행동→결과 구조 활용

스토리텔링을 활용한 효과적인 사용자 시나리오 작성법
뇌의 활성화 패턴 차이:
단순한 글머리 기호 목록을 읽을 때: 언어 처리 영역만 활성화(브로카 영역, 베르니케 영역)
이야기를 읽을 때: 언어 처리뿐 아니라 경험 관련 영역도 함께 활성화
공감과 몰입 효과:
이야기를 통해 독자는 등장인물의 경험을 간접적으로 체험
이는 팀원들이 사용자 관점에서 생각할 수 있게 도움
추상적 기능 설명보다 구체적 사용 상황이 더 명확한 이해 제공
기억과 의사결정에 미치는 영향:
이야기 형태의 정보는 42% 더 잘 기억됨
공감적 이해는 더 나은 설계 결정으로 이어짐
"인류 역사상 가장 오래되고 효과적인 커뮤니케이션 방식은 이야기다."

사용자 시나리오의 구조
1. 설정(Setup): 사용자 소개 및 상황 설명, 관련 맥락 제공
예시: "서울에 사는 김로버트(32세)는 바쁜 IT 프로젝트 매니저입니다. 그는 다음 달 이사를 앞두고 있지만, 업무 시간에 이사 업체에 연락할 시간이 없어 고민하고 있습니다."
2. 문제/이슈(Problem/Conflict): 사용자가 직면한 문제나 해결해야 할 이슈, 기존 해결책의 한계
예시: "로버트는 이전에도 이사 업체를 찾느라 여러 통화를 주고받느라 시간을 낭비했고, 중요한 미팅 중에 이사 업체로부터 전화가 와서 곤란했던 경험이 있습니다."

사용자 시나리오의 구조
3. 행동(Action): 제품을 사용하는 과정, 핵심 기능과의 상호작용
예시: "로버트는 무버 앱을 다운로드하고 기본 이사 정보를 입력합니다. 여러 업체로부터 견적을 받은 후, 가장 마음에 드는 업체에 앱 내 메시징 기능을 통해 추가 질문을 보냅니다. 그날 밤 집에 돌아와 업체의 답변을 확인하고 추가 사진을 찍어 공유합니다."
4. 결과(Result): 제품 사용 후 사용자의 상황 변화, 얻은 가치와 혜택
예시: "로버트는 업무 시간에 방해받지 않고 자신의 편한 시간에 이사 준비를 완료할 수 있었습니다. 전체 과정이 앱 내에서 이루어져 커뮤니케이션 기록이 모두 남아있어 안심할 수 있었고, 결국 만족스러운 이사 서비스를 경험했습니다."

6. 사용자 시나리오 예시

A씨의 아침 콘텐츠 발견 여정
A씨는 출근길 지하철에서 앱을 열고 "당신을 위한 발견" 섹션을 확인합니다. 그녀의 최근 관심사(디지털 마케팅)와 현재 맥락(아침 시간대)을 고려한 추천 콘텐츠들이 보입니다.
"5분 만에 이해하는 신경망 마케팅 응용" 제목의 콘텐츠를 읽은 후, "관련 인사이트" 섹션에서 "경쟁사들의 최신 AI 마케팅 사례"를 발견하고 저장합니다.
15분간의 앱 사용으로 민지는 오늘 회의에 활용할 유용한 인사이트를 얻었고, 앱은 이 패턴을 학습하여 다음 추천에 반영합니다.

7. 요구사항/포함 기능
효과적인 기능 정의:
단순 기능 나열이 아닌 문제 해결 방식 설명
우선순위 명확화 (P0: 필수, P1: 중요, P2: 선택)
각 기능의 목적과 사용자 가치 연결
기능 범위와 한계 명확히 설정
작성 접근법:
사용자 니즈 기반 기능 그룹화
MVP(최소 실행 가능 제품)에 집중
각 기능의 구체적인 동작 설명
기술적 구현 방법보다 해결해야 할 문제에 집중

7. 요구사항/포함 기능 예시

7.1 핵심 추천 엔진 (P0)
 ✅ 개인화 추천 알고리즘
사용자 행동 기반(조회, 완료율, 좋아요 등) 모델
목적: 개인별 관심사 프로필 구축 및 업데이트
 ✅ 컨텍스트 인식 추천
시간대, 기기별 최적화된 콘텐츠 추천
목적: 사용자 상황에 맞는 최적의 콘텐츠 제안
7.2 UI 구성요소 (P0)
 ✅ 홈화면 개인화 섹션
상단 50% 영역에 개인화 추천 배치
목적: 즉시 관련성 높은 콘텐츠 접근성 제공

8. 제외 기능
제외 기능 정의의 중요성:
프로젝트 범위 명확화
팀 기대치 관리
불필요한 기능 확장 방지
미래 개발 로드맵 기초 제공
효과적인 작성법:
명확하고 구체적인 제외 항목 나열
제외 이유 간략히 설명
향후 개발 가능성 표시 (필요시)
주요 이해관계자의 기대 관리

8. 제외 기능 예시

❌ 소셜 기반 추천 시스템
이유: 기본 추천 품질 확립 후 고려 (v2.0, 2025년 Q3)
❌ 서드파티 플랫폼 데이터 통합
이유: 개인정보 보호 규정 관련 법적 검토 필요
❌ 고급 A/B 테스트 프레임워크
이유: 초기 버전에서는 단일 알고리즘 성과 입증에 집중

9. 디자인 고려사항
디자인 섹션의 목적:
사용자 경험 원칙 설정
핵심 사용자 흐름 정의
디자인 및 개발팀의 방향성 제시
일관된 사용자 경험 보장
포함 요소:
핵심 사용자 흐름도
디자인 원칙 및 가이드라인
와이어프레임 또는 프로토타입 링크
접근성 및 사용성 요구사항

9. 디자인 고려사항 예시

1. 사용자 발견성 강화
추천 콘텐츠가 눈에 띄되 침투적이지 않게 설계
추천과 일반 콘텐츠 구분을 위한 시각적 단서 필요
추천 이유에 대한 간결한 컨텍스트 제공
2. 콘텐츠 간 자연스러운 전환
현재 콘텐츠에서 다음 콘텐츠로의 흐름 유도
콘텐츠 소비 완료 시점의 경험 최적화
3. 사용자 제어와 선택권
추천 시스템에 대한 피드백 메커니즘 제공
개인화 수준 조정 옵션 필요
Figma 와이어 프레임 링크: https://……

10. 시스템 요구사항
시스템 요구사항의 역할:
개발팀에 기술적 방향성 제시
기술적 제약 및 요구사항 명확화
잠재적 기술 문제 사전 식별
개발 범위와 복잡성 파악
포함 요소:
지원 플랫폼 및 환경
백엔드/프론트엔드 요구사항
API 및 외부 서비스 연동
성능 및 보안 요구사항
기술적 제약조건

10. 시스템 요구사항 예시

10.1 데이터 요구사항
 ✅ 사용자 데이터: 3개월간의 상호작용 이력
 ✅ 콘텐츠 데이터: 구조화된 메타데이터, 콘텐츠 임베딩
10.2 성능 요구사항
 ✅ 추천 생성 지연시간: 200ms 이내
 ✅ 동시 사용자: 최대 50만 사용자 지원
10.3 기술 스택
 ✅ 알고리즘: TensorFlow/PyTorch 기반 머신러닝 모델
 ✅ API: GraphQL API (Node.js)
 ✅ 데이터베이스: MongoDB(사용자), PostgreSQL(콘텐츠)

11. 가정, 제약사항 및 의존성
섹션 목적:
프로젝트 불확실성 사전 식별
개발 계획의 현실성 확보
잠재적 위험 요소 관리
의존 관계 명확화
주요 요소:
가정: 프로젝트 진행에 기반이 되는 전제조건
제약사항: 기술적, 법적, 비즈니스적 한계
의존성: 외부 팀, 서비스, 일정 등에 대한 의존 관계

11. 가정, 제약사항 및 의존성 예시

11.1 가정 사항
사용자들은 개인화된 추천을 위한 데이터 수집에 동의했다고 가정
콘텐츠 메타데이터가 일관적이고 정확하다고 가정 (15% 불완전)
11.2 제약 사항
데이터 처리는 실시간이 아닌 일일 배치 처리만 지원 (24시간 지연)
데이터 과학팀은 3명으로 복잡한 알고리즘 개발에 제한
11.3 의존성
콘텐츠 태깅 시스템 개선 (콘텐츠팀, 3월 15일 완료 예정)
영향: 없을 경우 추천 정확도 20% 저하 가능성
사용자 프로필 API 업데이트 (백엔드팀, 4월 1일 완료 예정)

12. 릴리즈 및 실험 계획 예시
섹션 목적:
점진적 출시 전략 수립
데이터 기반 검증 계획 설정
피드백 수집 및 개선 프로세스 정의
출시 후 모니터링 체계 구축
효과적인 계획 요소:
단계적 릴리즈 일정
A/B 테스트 계획
사용자 피드백 수집 방법
핵심 지표 모니터링 방안
긴급 상황 대응 계획

12. 릴리즈 및 실험 계획 예시
12.1 단계적 출시
내부 알파 (4월 15-30일): 직원 100명, 기본 기능성 확인
베타 (5월 1-15일): VIP 사용자 1,000명, 클릭률 8% 목표
롤아웃: 5%(5/16) → 25%(5/23) → 50%(5/30) → 100%(6/15)
12.2 A/B 테스트
알고리즘 비교: 협업 필터링 vs 하이브리드 모델
지표: 클릭률, 완료율, 다양성 점수
추천 표시 방식: 이유 표시 vs 미표시
지표: 클릭률, 신뢰도 점수
12.3 출시 중단 기준
앱 크래시율 2% 초과, 추천 생성 실패율 5% 초과
클릭률 5% 미달, 서버 응답시간 500ms 초과

PRD 작성 후 활용 방법
팀 킥오프 미팅의 기준 문서로 활용
개발 과정 중 지속적인 참조 및 업데이트
의사결정 및 우선순위 조정의 근거로 활용
출시 후 회고와 학습의 기준점으로 활용

협업 및 피드백
핵심 이해관계자와 초기부터 협업
디자인 및 개발팀의 실행 가능성 검토
지속적인 업데이트와 변경사항 공유
문서 자체보다 공통 이해와 합의에 집중

PRD를 살아있는 문서로 유지하기
정기적인 검토 및 업데이트 일정 수립
학습과 피드백을 통한 지속적 개선
성공 및 실패 사례의 기록과 공유
팀의 PRD 프로세스 자체에 대한 개선

PRD는 단순히 요구사항을 정리하는 문서가 아닌, 올바른 제품을 만들기 위해 제품팀과 소통하는 핵심 도구이다.

개인 연구
프로젝트에서 도출된 다양한 아이디어 중 우선순위가 높은 아이디어를 선정하여, MVP로 구현할 대상을 정합니다.
다양한 MVP 구현 전략을 검토하고, 어떤 방식으로 MVP를 설계할지 계획합니다.
수립한 계획을 바탕으로 제품팀과 함께 개발을 진행할 수 있도록 PRD 초안을 작성합니다.
작성할 수 있는 부분은 구체적으로 작성하고, 작성이 어려운 부분은 필요한 학습과 추가 연구 내용을 정리합니다.

질의응답 & 토론

수고하셨습니다
