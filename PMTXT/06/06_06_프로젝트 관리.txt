프로젝트 관리(6)
개발 조직 관리와 협업

사전 질문(15분)
개발자와 함께 일한다고 했을 때, 가장 막막하거나 걱정되는 부분은 무엇인가요?

개발 조직 입장에서 곤란하게 느낄 수 있는 요청은 어떤 것들이 있을까요? 이를 해결하기 위해 어떤 태도를 가져야 할까요?

사전 질문 토론
✅ 1. 개발자와 함께 일할 때 PM이 가장 막막하거나 걱정되는 부분은 무엇인가요?
개발 지식 부족으로 인해 소통에 어려움을 느끼거나, 기술적 제약을 인지하지 못해 요청이 애매해질까 걱정된다.
기획 의도와 실제 구현 간의 차이, 요구사항 전달 부족, 우선순위 충돌이 대표적 걱정거리다.
개발 용어와 프로세스에 대한 이해 부족, 비협조적 커뮤니케이션에 대한 불안도 있다.
의사결정 지연, 구현 불가 판단, 개발자와 디자이너 간 갈등 가능성 등도 우려된다.
✅ 2. 개발 조직이 곤란하게 느끼는 요청은 무엇이며, 이를 해결하기 위한 PM의 태도는 어떤가요?
명확하지 않은 요구, 잦은 변경 요청, 비현실적인 일정, 기술 제약 무시는 개발 조직에 큰 부담을 준다.
이를 해결하려면 PM은 문제 맥락과 이유를 명확히 설명하고, 우선순위와 일정을 조율하며, 기술적 한계를 존중하고 유연하게 협의하는 태도를 가져야 한다.
무엇보다 개발자를 명령 대상이 아닌 협력자로 인식하며, 공동 목표를 향한 팀워크를 강조해야 한다.

Case: 시시때때로 변하는 요구사항에 지친 개발조직
빠르게 제품을 출시하고 개선하는 방식의 조직문화를 갖추고자 하는 회사
2주마다 출시를 목표로 의사결정과 업무 프로세스를 조율
여기저기서 나오는 불만들
지금 우리가 뭘 만들고 있는지 모르겠다
기간에 맞추다 보니까 이도저도 아닌 것들이 나왔다
출시에 급급해서 코드가 엉망이고 유지보수도 포기했다
그럼에도 불구하고 빠른 출시가 중요하다고 판단하여 이런 문화를 유지
이 문제는 어떻게 해결해야 하는 것인가?

개발 조직의 관리는 고도화된 업무이다
기술 전문가 그룹의 긴밀한 협업과 체계적인 관리를 통해서만 성공적인 제품 개발이 가능
비전문가의 입장에서 이 문제를 단순하게 해결하려고 했던 시도가 문제
빠른 시도와 학습을 만들어 내기 위해선 개발팀의 협조가 필수적
개발 조직이 겪는 업무의 어려움을 깊이있게 공부하고 이를 섬세하게 해소해야 한다

제품팀의 ‘속도'를 담보하는 것은 개발 조직의 효율화이고 제품의 성공을 위해 이 문제에 대해 ‘PM’이 깊이있게 이해하고 개선하려는 노력을 가져야 한다

소프트웨어 개발의 본질적 어려움
본질적 복잡성 (Essential Complexity): 문제 자체에 내재된 복잡함
사용자 요구는 다양하고, 서로 충돌하기도 함
비즈니스 규칙과 예외 처리가 복잡함
외부 시스템과의 의존성과 상호작용이 많음
우발적 복잡성 (Accidental Complexity): 구현 과정에서 생기는 추가적인 복잡함
사용하는 기술 스택이나 도구의 제약
팀 내 또는 팀 간의 소통 오류
프로세스 자체가 불필요하게 무거워지는 경우
→ 이러한 복잡성을 관리하기 위해 방법론이 존재함

개발 방법론의 역사적 흐름
코딩 & 수정(1950-60년대): 체계적 방법론 부재, 개인 역량 의존
구조적 방법론(1970년대): 워터폴 모델 등장, 체계적 개발 시작
정보 공학(1980년대): 데이터 중심 접근법, CASE 도구 등장
객체 지향(1990년대): 반복적 개발과 재사용성 강조
애자일 혁명(2000년대): 변화 수용과 협업 강조, 스크럼/XP 등장
DevOps & 지속적 배포(2010년대): 개발-운영 통합, 자동화 강조
제품 중심 개발(현재): 방법론 믹스 & 매치, 맥락 기반 접근

방법론 분류의 스펙트럼
계획 주도 vs. 가치 주도: 사전 계획 중심 ↔ 고객 가치 중심
예측적 vs. 적응적: 사전 예측 기반 ↔ 변화 적응 기반
단계적 vs. 반복적: 순차적 단계 진행 ↔ 작은 단위 반복
문서 중심 vs. 협업 중심: 문서화 강조 ↔ 대면 소통 강조
통제 중심 vs. 자율 중심: 중앙 통제 ↔ 자기 조직화 팀

워터폴 방법론: 계획 주도 개발의 이해
워터폴의 근본 철학과 원칙
선형적 진행: 명확한 단계별 순차 진행
사전 계획 중시: "계획하고 실행한다" 패러다임
단계 게이트 모델: 각 단계 완료 및 승인 후 다음 단계 진행
완전성 추구: 각 단계에서 완전한 결과물 추구
문서 기반 지식 이전: 상세 문서로 지식 전달


1. 요구사항 분석 (Requirements Analysis)
사용자의 요구를 수집하고 정리하는 단계
제품이 무엇을 해야 하는지, 어떤 제약 조건이 있는지를 문서화
이 문서는 이후 설계와 개발의 기준이 됨
요구사항이 바뀌면 전체 계획이 흔들리기 때문에, 이 단계에서 최대한 명확히 해야 함
실무에서는 여기서의 누락이나 오해가 뒤에서 큰 비용으로 이어짐

주요 산출물: 요구사항 명세서(SRS)
PM 역할: 이해관계자 인터뷰, 요구사항 도출, 비즈니스 케이스 개발

2. 설계 (System Design)
요구사항을 바탕으로 시스템이 어떻게 동작할지를 구조적으로 정의
전체 시스템의 구조(아키텍처), 화면 흐름, DB 설계 등을 포함
개발자가 구현할 수 있을 만큼 구체적으로 설계되어야 함
설계가 제대로 되어야 개발이 일관성 있게 진행되고, 품질 차이가 줄어듦

주요 산출물: 시스템 디자인 명세, 인터페이스 정의
PM 역할: 기능 우선순위화, 기술팀과 설계 검증, 리스크 식별

3. 구현 (Implementation)
설계 문서를 기준으로 실제 코드를 작성하는 단계
기능 단위로 개발하며, 일반적으로 단위 테스트까지 포함
개발자는 설계를 해석하는 것이 아니라, 설계된 대로 정확히 구현하는 것이 중요함
이 단계에서 설계 누락이 발견되면, 다시 설계로 돌아가야 하므로 낭비가 큼

주요 산출물: 소스코드, 단위 테스트
PM 역할: 진행 상황 모니터링, 이슈 해결, 범위 관리

4. 테스트 (Testing)
개발된 전체 시스템이 요구사항에 맞게 동작하는지 확인하는 단계
기능 테스트, 통합 테스트, 사용자 시나리오 테스트 등을 포함
설계대로 구현되었는지가 아니라, 요구사항대로 작동하는지가 핵심
버그가 발견되면 수정 후 다시 테스트하므로 품질 보장은 이 단계에서 결정됨

주요 산출물: 테스트 보고서, 알려진 이슈 목록
PM 역할: 테스트 계획 수립, 결함 우선순위화, 품질 판단

5. 배포 (Deployment)
테스트를 통과한 제품을 실제 운영 환경에 배포
사용자 매뉴얼, 교육 자료, 운영 지원 체계 등을 함께 준비
이 단계에서는 기능 변경보다는 안정적 운영에 초점이 맞춰짐
이후 유지보수에서 발견될 문제를 최소화하기 위한 마지막 점검 단계


6. 유지보수 (Maintenance)
운영 중 발견된 오류 수정, 성능 개선, 일부 기능 보완 등을 수행
워터폴에서는 요구 변경이나 추가는 어렵기 때문에, 유지보수는 제한적
변경이 클 경우, 새로운 프로젝트로 처리되는 경우가 많음
초기 단계에서의 판단이 유지보수 비용을 크게 좌우하게 됨

워터폴이 효과적인 상황
요구사항 안정성: 요구사항이 잘 정의되고 변경 가능성이 낮은 경우예: 규제가 엄격한 산업(의료, 금융, 항공 등), 물리적 제약이 명확한 하드웨어 연동 시스템
명확한 최종 상태: 목표 시스템의 상태가 명확히 정의된 경우예: 레거시 시스템 마이그레이션/교체, 기존 시스템 호환 구현
자원 제약: 프로젝트 리소스 예측과 통제가 중요한 경우예: 엄격한 계약 기반 개발(정부/공공 프로젝트), 고정 일정/예산 제약이 있는 프로젝트
고위험 영역: 실패 비용이 매우 높은 미션 크리티컬 시스템예: 안전 중요 시스템, 금융 코어 시스템, 대규모 다중 시스템 통합 프로젝트

워터폴의 강점과 약점
강점:
명확한 단계와 결과물로 예측 가능성 제공
포괄적 문서화로 지식 이전과 유지보수 용이
철저한 사전 계획으로 위험 최소화
명확한 마일스톤으로 진행 상황 파악 용이
대규모/복잡한 프로젝트 관리에 효과적

워터폴의 강점과 약점
약점:
요구사항 변경 수용에 경직성
후반부 발견된 문제의 높은 해결 비용
실제 사용자 피드백 반영의 지연
장기 프로젝트의 시장 변화 대응 어려움
과도한 문서화로 인한 오버헤드

‘출시'가 목표인 경우는 워터폴로 충분하지만‘성공'이 목표인 경우는 명확한 한계가 존재한다

실패하는 프로젝트들
1995년 Standish Group 보고서 충격적 결과:
프로젝트의 31.1%만 성공
52.7%는 비용 초과, 일정 지연, 기능 축소로 타협
16.2%는 완전히 실패, 아무 것도 전달하지 못함
대형 프로젝트일수록 실패율 증가:
5억 이상 프로젝트: 성공률 10% 미만
3~5년 장기 프로젝트: 요구사항 변경으로 대부분 실패

현실의 벽에 부딪힌 워터폴
IBM, 미 국방부가 표준화한 단계적 개발 방법론
현실의 벽에 부딪힌 워터폴:
요구사항 변경 불가피 → 초기 계획 무효화
피드백 지연 → 잘못된 방향 장기간 지속
최종 결과물까지 가치 전달 없음 → 투자 리스크 증가
문서와 프로세스 자체가 목적화 → 관료주의 심화

인터넷과 소프트웨어 환경의 급변
1990년대 후반: 닷컴 열풍과 웹 기술 혁명
시장 상황 변화:
비즈니스 주기 가속화: 12년 → 36개월
고객 기대 상승: 즉각적 가치, 지속적 개선 요구
경쟁 심화: 빠르게 대응하지 못하면 도태
전통적 방법으로는 새로운 현실에 적응 불가능

현장에서 시작된 변화
개발자들의 자생적 대응:
"계획대로 안 되면, 계획이 문제다"
문서보다 작동하는 코드 중심
대형 릴리스보다 작은 단위 점진적 개발
개인 생산성 소프트웨어 업체 성공:
빠른 피드백과 적응적 개발로 시장 반응 활용
6개월마다 새 버전 출시로 경쟁 우위 확보
인터넷 스타트업들:
"완벽한 제품보다 빠른 출시"
사용자 피드백 기반 진화적 개발

프로세스보다 사람에 대한 재발견
전문가들의 인사이트:
"소프트웨어 개발은 제조가 아닌 창조 활동"
"복잡한 문제는 상세 계획보다 팀 협업으로 해결"
소프트웨어 개발의 본질적 특성 인정:
불확실성과 변화는 피할 수 없는 현실
계획 무효화는 실패가 아닌 학습 기회
인간 창의성과 협업이 핵심 성공 요소

https://agilemanifesto.org/

애자일 12가지 원칙
고객 만족 최우선: 가치 있는 소프트웨어 지속 전달
변경 환영: 경쟁 우위를 위한 변화 수용
빈번한 전달: 짧은 타임스케일로 작동 소프트웨어 제공
일상적 협력: 비즈니스-개발자 간 긴밀한 협업
동기 부여: 신뢰하는 환경과 지원 제공
대면 소통: 가장 효율적인 정보 전달 방식
진행 척도: 작동하는 소프트웨어가 주요 진행 지표
지속 가능성: 일정한 페이스 유지
기술적 우수성: 좋은 설계로 민첩성 강화
단순성: 최대한 작업량 줄이기
자기조직화 팀: 최고의 아키텍처와 요구사항 도출
정기적 회고: 팀 효율성 향상을 위한 조정

애자일의 핵심 실행 원리
점진적 개발(Incremental Development): 작은 단위로 나누어 개발
전체를 한 번에 개발하지 않고 부분별 구현
사용 가능한 소프트웨어 조각들의 지속적 확장
반복적 개발(Iterative Development): 지속적 개선 사이클
계획-구현-피드백-개선의 반복 사이클
이전 결과물의 피드백으로 다음 반복 개선
적응형 계획(Adaptive Planning): 변화를 고려한 유연한 계획
상세한 장기 계획보다 방향성과 단기 계획 중심
새로운 정보에 따라 계획 지속 조정

애자일의 핵심 실행 원리
진화적 전달(Evolutionary Delivery): 사용자 가치 중심 점진적 전달
가장 가치 있는 기능부터 우선 전달
피드백 기반 제품 진화 방향 조정
시간 제한 반복(Timeboxing): 고정 기간 내 작업 집중
정해진 기간(예: 2주) 동안 집중 개발
범위보다 일정을 우선시한 자원 관리

주요 애자일 프레임워크 개요
스크럼(Scrum): 가장 널리 쓰이는 애자일 프레임워크
핵심 요소: 스프린트, 데일리 스크럼, 백로그, 3가지 역할(PO, SM, 개발팀)
특징: 명확한 역할과 의식(ritual), 반복적 개발 사이클
칸반(Kanban): 흐름 기반 개발 방식
핵심 요소: 칸반 보드, WIP(진행 중 작업) 제한, 지속적 흐름
특징: 유연한 배포, 작업 시각화, 병목 현상 관리
익스트림 프로그래밍(XP): 기술적 우수성 중심 접근법
핵심 요소: 페어 프로그래밍, TDD, 지속적 통합, 간단한 설계
특징: 개발 관행과 기술적 규율 강조
린 소프트웨어 개발(Lean): 낭비 제거 중심 접근법
핵심 요소: 낭비 제거, 빠른 학습, 늦은 결정, 전체 최적화
특징: 시스템 사고와 지속적 개선 강조

애자일이 효과적인 상황과 맥락
요구사항 불확실성: 명확한 정의가 어렵거나 변화 가능성 높은 경우예: 신규 시장 진입 제품, 혁신적 서비스, 사용자 행동에 대한 가설 검증이 필요한 경우
빠른 피드백 중요성: 시장/사용자 반응에 따른 조정이 중요한 경우예: 경쟁이 치열한 소비자 애플리케이션, 사용자 경험이 성공의 핵심 요소인 제품
복잡한 문제 영역: 해결책이 명확하지 않은 탐색적 영역예: 새로운 비즈니스 모델 구현, 기존에 없던 문제 해결 시도
자기조직화 팀 역량: 높은 자율성과 책임감을 가진 성숙한 팀예: 기술적 역량과 제품 이해도가 높은 팀, 협업 문화가 강한 소규모 응집력 있는 팀

애자일과 워터폴 맥락에서의 PM 역할 차이
워터폴 환경의 PM
애자일 환경의 PM
계획 접근법
상세한 사전 계획과 단계별 진행
적응형 계획과 반복적 조정
요구사항 관리
포괄적 PRD와 변경 통제
진화하는 백로그와 사용자 스토리
이해관계자 관리
공식적 보고와 단계별 승인
지속적 참여와 데모 기반 피드백
위험 관리
사전 위험 식별과 대응 계획
지속적 위험 평가와 적응적 대응
의사결정
계층적, 공식적 의사결정
팀 기반, 분산된 의사결정
품질 보증
단계별 검증과 종합적 테스트
지속적 테스트와 반복적 검증
문서화
포괄적이고 형식적인 문서
최소한의 실용적 문서화
성공 측정
계획 대비 실행 정확도
고객 가치 전달과 적응 능력

Break Time

하이브리드 접근법: 상황에 맞는 방법론 설계
순수 방법론의 한계: 실제 환경은 방법론 교과서보다 복잡
조직 현실: 다양한 팀/부서 간 서로 다른 방법론 조화 필요
제품 복잡성: 하나의 제품 내에서도 다양한 특성 공존
점진적 전환: 급격한 방법론 전환의 위험성 완화
실용주의: 형식보다 효과에 집중하는 결과 지향적 접근

효과적인 하이브리드 구성 패턴
단계별 하이브리드: 제품 개발 단계에 따른 방법론 전환
초기 탐색: 린 스타트업/디자인 씽킹 접근법
개념 검증: 애자일 프로토타이핑
제품 구축: 스크럼/칸반 기반 반복 개발
확장/안정화: 워터폴식 계획 관리

효과적인 하이브리드 구성 패턴
계층적 하이브리드: 조직 수준별 다른 접근법 적용
전략/로드맵 수준: 워터폴식 계획 (분기/년 단위)
릴리스 수준: 점진적 계획 (월/분기 단위)
실행 수준: 애자일 반복 (주/격주 단위)

효과적인 하이브리드 구성 패턴
영역별 하이브리드: 제품 구성요소별 다른 방법론 적용
핵심 인프라/플랫폼: 안정성 중심 워터폴
사용자 인터페이스/기능: 변화 대응 애자일
데이터/분석: 실험 중심 린 접근법

사례 연구: 성공적인 하이브리드 접근법
금융 서비스 앱 개발 사례:
상황: 엄격한 규제 환경 + 경쟁적 사용자 경험 요구
접근법: 핵심 금융 시스템(워터폴) + 사용자 인터페이스(애자일)
성공 요인: 명확한 인터페이스 정의, 병렬 작업 흐름, 통합 테스트 자동화
의료 기기 소프트웨어 개발 사례:
상황: FDA 규제 준수 + 빠른 환자 피드백 반영 필요
접근법: 규제 문서(워터폴) + 내부 개발(애자일) + 통합된 검증
성공 요인: 이원화된 문서화 전략, 위험 기반 검증 우선순위
기업용 SaaS 플랫폼 개발 사례:
상황: 안정적 백엔드 요구 + 경쟁적 프론트엔드 혁신 필요
접근법: 인프라/API(워터폴식 계획) + 기능/UI(애자일 반복)
성공 요인: 마이크로서비스 아키텍처, 명확한 계약 기반 API, CI/CD 파이프라인

개발 조직과 협력적으로 일하기 위해서는어떻게 해야 할까?

엔지니어링 팀과의 효과적 협업
개발자의 근본적 동기 요소:
자율성(Autonomy): 작업 방식 결정의 자유
숙련도(Mastery): 기술적 성장과 전문성 향상
목적의식(Purpose): 의미 있는 문제 해결에 기여
엔지니어링 가치관의 이해:
기술적 우아함: 간결하고 효율적인 해결책 선호
논리적 일관성: 명확한 인과관계와 패턴 중시
복잡성 관리: 정돈된 구조와 체계화 선호
효율성 추구: 반복 작업 자동화와 최적화 지향

PM-개발자 관계 형성의 핵심 요소
신뢰 구축 전략:
기술적 존중: 엔지니어의 전문적 판단 존중
투명성: 목표와 제약조건의 솔직한 공유
지원적 리더십: 장애물 제거와 자원 확보 지원
결과 중심: 미세관리 대신 명확한 기대치 설정
“PM이 새 기능 설계안을 공유하면서 ‘이 구조가 기술적으로 무리 없을지, 더 나은 방식이 있으면 조언해 주세요’라고 요청하자, 개발자는 아예 다른 설계 접근을 제안했고, 팀이 그 방향으로 전환했다. 이후 PM은 일정과 우선순위를 재조정해 개발 리스크를 줄였다.”

PM-개발자 관계 형성의 핵심 요소
갈등 관리와 해소:
원인 이해: 표면적 갈등 너머 근본 원인 탐색
공동 문제 해결: 대립 구도 대신 협력적 접근
데이터 중심 논의: 개인적 선호보다 객관적 기준
타협점 탐색: 창의적 대안과 절충안 모색
“기획 의도와 개발 난이도 충돌로 회의가 팽팽하던 상황에서, PM이 ‘사용자 행동 데이터를 다시 보고 판단하자’고 제안했다. 이후 두 사람은 해당 지표를 기준 삼아 원인을 정리했고, 개발자는 기존 구조를 유지하면서 기획 요구를 반영할 수 있는 절충안을 직접 제안했다.”

PM-개발자 관계 형성의 핵심 요소
신뢰 구축 전략:
기술적 존중: 엔지니어의 전문적 판단 존중
투명성: 목표와 제약조건의 솔직한 공유
지원적 리더십: 장애물 제거와 자원 확보 지원
결과 중심: 미세관리 대신 명확한 기대치 설정
“PM이 새 기능 설계안을 공유하면서 ‘이 구조가 기술적으로 무리 없을지, 더 나은 방식이 있으면 조언해 주세요’라고 요청하자, 개발자는 아예 다른 설계 접근을 제안했고, 팀이 그 방향으로 전환했다. 이후 PM은 일정과 우선순위를 재조정해 개발 리스크를 줄였다.”

협업을 망치는 PM의 언어 패턴과 대안
망치는 패턴 1: "이거 간단히 할 수 있지 않나요?"
문제점: 복잡성 과소평가와 전문성 무시 암시
대안 표현: "이 기능의 구현 복잡도가 어느 정도일까요?"
망치는 패턴 2: "그냥 이렇게만 해주세요"
문제점: 맥락 없는 지시와 자율성 제한
대안 표현: "우리가 해결하려는 문제는 X입니다. 어떤 접근법이 좋을까요?"
망치는 패턴 3: "왜 이렇게 오래 걸리죠?"
문제점: 불신과 압박, 기술적 도전 무시
대안 표현: "어떤 어려움이 있는지 이해하고 싶습니다."

협업을 망치는 PM의 언어 패턴과 대안
망치는 패턴 4: "급하게 이것만 추가해요"
문제점: 계획 무시와 기술 부채 강요
대안 표현: "예상치 못한 요청이 있는데, 현재 계획에 미치는 영향을 논의할 수 있을까요?"
망치는 패턴 5: "이건 버그가 아니에요"
문제점: 사용자 경험과 기술적 관점 충돌
대안 표현: "사용자 영향도와 수정 복잡성을 함께 평가해봅시다."

기술 부채 이해와 관리
기술 부채란? 
당장의 속도나 편의를 위해 최적이 아닌 방식으로 개발한 결과, 미래에 추가 비용이나 위험으로 돌아오는 기술적 부담이다.
의도적 부채: 전략적 판단에 따른 의식적 타협
비의도적 부채: 경험 부족, 지식 격차로 인한 부채
환경적 부채: 기술 변화, 레거시 시스템에 따른 부채
아키텍처 부채: 구조적 일관성/확장성 부족
코드 품질 부채: 가독성, 유지보수성 문제

기술 부채의 비즈니스 영향
개발 속도 저하: 변경 비용과 시간 증가
안정성 저하: 예상치 못한 오류와 장애 증가
혁신 제한: 새로운 기능 추가 어려움
개발자 사기 저하: 지속적 문제 해결의 피로

PM의 기술 부채 관리 프레임워크
가시화: 기술 부채 인벤토리 유지 및 공유
정량화: 비즈니스 영향과 해결 비용 평가
우선순위화: 위험/영향/비용 기반 상환 계획
예방: 품질 표준과 지속적 개선 문화
상환: 정기적 부채 상환 시간 할당 (개발 시간의 20% 규칙)

개발 문화와 집중 환경 보호
깊은 작업(Deep Work)의 중요성:
프로그래밍 = 복잡한 인지 활동
맥락 전환 비용: 인터럽트 후 15-30분 회복 시간
몰입 상태(Flow)와 생산성의 관계
PM의 집중 환경 조성 전략:
회의 최소화: 필수 회의만 집중적으로 진행
집중 시간 보호: 일정 시간대 회의/방해 금지
비동기 소통 활용: 즉각 응답 기대보다 문서화된 소통
인터럽션 패턴 인식: 빈번한 방해 요소 체계적 제거

개발 문화와 집중 환경 보호
효과적인 회의 운영:
명확한 목적과 아젠다 사전 공유
최소 필요 인원만 참석
준비된 논의와 집중된 결정
액션 아이템 명확화와 추적
비동기 소통 최적화:
구조화된 요청: 맥락, 기한, 기대 결과 명시
문서화 우선: 구두 설명보다 참조 가능한 기록
도구 활용: 이슈 트래커, 지식 베이스, 비동기 채널
응답 기대치 관리: 긴급성에 따른 차별화된 채널

주니어 개발팀과의 효과적 협업
명확한 가이드: 더 구체적인 방향과 기대치 제시
학습 기회: 실수를 학습 경험으로 활용
점진적 자율성: 성장에 따라 단계적 책임 확대
비즈니스 맥락 공유: 단순 작업이 아닌 목적 이해 촉진
품질 문화: 초기부터 좋은 관행과 표준 형성

원격/분산 개발팀과의 협업
명확한 문서화: 결정사항과 맥락의 철저한 기록
가시성 강화: 업무와 진행 상황의 투명한 공유
의도적 소통: 우연한 소통 기회 부족 보완
시간대 관리: 골든 아워(시간대 중첩) 활용
팀 결속력: 정기적 화상 회의와 가상 팀 활동

외주 개발팀 관리
명확한 계약: 요구사항, 산출물, 일정 명시
지식 이전 계획: 장기적 유지보수 고려
단계적 검증: 작은 단위로 나누어 진행 확인
품질 관리: 명확한 기준과 검수 프로세스
파트너십 구축: 단순 공급자가 아닌 협력자로 관계 형성

개발 과정에서 PM의 핵심 책임
우선순위 관리자:
백로그 정제와 우선순위화
비즈니스 가치와 기술적 고려사항 균형
긴급한 것과 중요한 것 사이의 균형
범위 관리자:
제품 범위의 명확한 경계 유지
범위 확장(Scope Creep) 방지
필요 시 적절한 범위 조정 협상

개발 과정에서 PM의 핵심 책임
정보 허브:
이해관계자와 개발팀 간 정보 전달
결정사항과 변경의 명확한 소통
진행 상황 투명한 공유
의사결정 촉진자:
빠른 의사결정 장벽 제거
데이터 기반 결정 촉진
팀 권한 부여와 가이드 균형

효과적인 PM이 갖춰야 할 핵심 마인드셋
결과 지향 사고:
프로세스보다 결과에 집중
방법론 자체가 아닌 가치 전달이 목적
"어떻게"보다 "무엇을" 중시
적응적 리더십:
상황에 맞는 유연한 접근법
계획과 적응의 균형
통제보다 영향력 중심

효과적인 PM이 갖춰야 할 핵심 마인드셋
시스템 사고:
개별 부분보다 전체 시스템 이해
인과관계와 피드백 루프 인식
근본 원인 분석과 패턴 인식
지속적 학습 자세:
실패를 배움의 기회로 인식
적극적 피드백 수용
새로운 접근법과 도구 탐구

개발 방법론의 미래 트렌드와 PM의 준비
제품 주도 개발(Product-Led Development):
방법론보다 제품과 사용자 가치 중심
개발-마케팅-영업의 경계 희석
PM 역할의 확장과 제품 성장 책임
AI 도구의 영향:
코드 자동 생성과 테스트 자동화
데이터 기반 의사결정 강화
반복 작업 자동화로 창의적 작업 집중

개발 방법론의 미래 트렌드와 PM의 준비
지속적 모든 것(Continuous Everything):
지속적 계획, 개발, 통합, 배포, 실험, 학습의 통합
분리된 단계보다 연속적 흐름으로 전환
작은 변화의 지속적 누적 효과
하이브리드 근무와 분산팀:
원격/현장 혼합 환경에 최적화된 접근법
비동기 협업 도구와 프로세스 발전
글로벌 인재 활용을 위한 협업 모델

더 좋은 제품을 꿈꾸는 것은 PM의 역할이지만
그 제품을 존재하게 하는 것은 개발 조직의 힘이다 

그룹 연구 (4인 1조)
검색이나 경험을 통해 ‘개발 조직의 비효율'로 인해 생긴 다양한 에피소드들에 대해 탐색해봅니다.
탐색한 내용을 조별로 공유하고, 앞서 학습한 내용을 바탕으로 무엇이 문제였는지에 대해 논의해 봅니다.
이 논의를 바탕으로 개발 조직을 잘 관리하고 좋은 협력구조를 만들기 위해 필요한 원칙을 수립하고 이를 정리해 봅니다.

질의응답 & 토론

수고하셨습니다
